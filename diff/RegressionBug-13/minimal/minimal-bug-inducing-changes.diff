diff -r -u ./RegMiner4APR-Regression-Bugs/WORKING/src/main/java/com/amihaiemil/eoyaml/ReadYamlMapping.java ./RegMiner4APR-Regression-Bugs/BIC/src/main/java/com/amihaiemil/eoyaml/ReadYamlMapping.java
--- ./RegMiner4APR-Regression-Bugs/WORKING/src/main/java/com/amihaiemil/eoyaml/ReadYamlMapping.java	2024-09-08 01:36:09.293774829 +1000
+++ ./RegMiner4APR-Regression-Bugs/BIC/src/main/java/com/amihaiemil/eoyaml/ReadYamlMapping.java	2024-09-08 01:36:09.261774605 +1000
@@ -179,23 +179,34 @@
      * The YamlNode value associated with a String (scalar) key.
      * @param key String key.
      * @return YamlNode.
      * @checkstyle ReturnCount (50 lines)
      */
     private YamlNode valueOfStringKey(final String key) {
         YamlNode value = null;
-        for (final YamlLine line : this.significant) {
-            final String trimmed = line.trimmed();
-            if(trimmed.endsWith(key + ":")
-                || trimmed.matches("^" + key + "\\:[ ]*\\>$")
-                || trimmed.matches("^" + key + "\\:[ ]*\\|$")
-            ) {
-                value = this.significant.toYamlNode(line);
-            } else if(trimmed.startsWith(key + ":")
-                && trimmed.length() > 1
-            ) {
-                value = new ReadPlainScalar(this.all, line);
+        final String[] keys = new String[] {
+            key,
+            "\"" + key + "\"",
+            "'" + key + "'",
+        };
+        for(final String tryKey : keys) {
+            for (final YamlLine line : this.significant) {
+                final String trimmed = line.trimmed();
+                if(trimmed.endsWith(tryKey + ":")
+                    || trimmed.matches("^" + tryKey + "\\:[ ]*\\>$")
+                    || trimmed.matches("^" + tryKey + "\\:[ ]*\\|$")
+                ) {
+                    value = this.significant.toYamlNode(line);
+                } else if(trimmed.startsWith(tryKey + ":")
+                    && trimmed.length() > 1
+                ) {
+                    value = new ReadPlainScalar(this.all, line);
+                }
+                if(value != null) {
+                    return value;
+                }
             }
         }
-        return value;
+        return null;
     }
 
     /**
