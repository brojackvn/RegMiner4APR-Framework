diff -r -u ./RegMiner4APR-Regression-Bugs/BUGGY/src/main/java/com/alibaba/fastjson/parser/JSONScanner.java ./RegMiner4APR-Regression-Bugs/BFC/src/main/java/com/alibaba/fastjson/parser/JSONScanner.java
--- ./RegMiner4APR-Regression-Bugs/BUGGY/src/main/java/com/alibaba/fastjson/parser/JSONScanner.java	2024-09-08 01:36:15.985821697 +1000
+++ ./RegMiner4APR-Regression-Bugs/BFC/src/main/java/com/alibaba/fastjson/parser/JSONScanner.java	2024-09-08 01:36:15.845820716 +1000
@@ -946,13 +946,16 @@
         int startPos = this.bp;
         char startChar = this.ch;
 
+        int spaceCount = 0;
         for (;;) {
             if (!charArrayCompare(text, bp, fieldName)) {
                 if (isWhitespace(ch)) {
                     next();
+                    spaceCount++;
 
                     while (isWhitespace(ch)) {
                         next();
+                        spaceCount++;
                     }
                     continue;
                 }
@@ -963,7 +966,7 @@
             }
         }
 
-        int index = bp + fieldName.length;
+        int index = bp + fieldName.length + spaceCount;
 
         char ch = charAt(index++);
         if (ch != '"') {
@@ -1003,8 +1006,8 @@
                     endIndex = indexOf('"', endIndex + 1);
                 }
 
-                int chars_len = endIndex - (bp + fieldName.length + 1);
-                char[] chars = sub_chars(bp + fieldName.length + 1, chars_len);
+                int chars_len = endIndex - (bp + fieldName.length + 1 + spaceCount);
+                char[] chars = sub_chars(bp + fieldName.length + 1 + spaceCount, chars_len);
 
                 stringVal = readString(chars, chars_len);
             }
@@ -1178,13 +1181,16 @@
     public long scanFieldSymbol(char[] fieldName) {
         matchStat = UNKNOWN;
 
+        int spaceCount = 0;
         for (;;) {
             if (!charArrayCompare(text, bp, fieldName)) {
                 if (isWhitespace(ch)) {
                     next();
+                    spaceCount++;
 
                     while (isWhitespace(ch)) {
                         next();
+                        spaceCount++;
                     }
                     continue;
                 }
@@ -1195,7 +1201,7 @@
             }
         }
 
-        int index = bp + fieldName.length;
+        int index = bp + fieldName.length + spaceCount;
 
         char ch = charAt(index++);
         if (ch != '"') {
diff -r -u ./RegMiner4APR-Regression-Bugs/BUGGY/src/test/java/com/alibaba/json/bvt/parser/JSONScannerTest_scanSymbol.java ./RegMiner4APR-Regression-Bugs/BFC/src/test/java/com/alibaba/json/bvt/parser/JSONScannerTest_scanSymbol.java
--- ./RegMiner4APR-Regression-Bugs/BUGGY/src/test/java/com/alibaba/json/bvt/parser/JSONScannerTest_scanSymbol.java	2024-09-08 01:36:16.013821893 +1000
+++ ./RegMiner4APR-Regression-Bugs/BFC/src/test/java/com/alibaba/json/bvt/parser/JSONScannerTest_scanSymbol.java	2024-09-08 01:36:15.877820940 +1000
@@ -67,6 +67,20 @@
     	Assert.assertEquals(JSONScanner.NOT_MATCH, lexer.matchStat());
     }
 
+    public void test_8() throws Exception {
+        JSONScanner lexer = new JSONScanner("\"value\": \"MINUTES\",");
+        long hashCode = lexer.scanFieldSymbol("\"value\":".toCharArray());
+        assertEquals(189130438399835214L, hashCode);
+        Assert.assertEquals(JSONScanner.VALUE, lexer.matchStat());
+    }
+
+    public void test_9() throws Exception {
+        JSONScanner lexer = new JSONScanner("\"value\":\"MINUTES\",");
+        long hashCode = lexer.scanFieldSymbol("\"value\":".toCharArray());
+        assertEquals(189130438399835214L, hashCode);
+        Assert.assertEquals(JSONScanner.VALUE, lexer.matchStat());
+    }
+
     static long fnv_hash(String text) {
         long hash = 0xcbf29ce484222325L;
         for (int i = 0; i < text.length(); ++i) {
