diff -r -u ./RegMiner4APR-Regression-Bugs/WORKING/src/main/java/org/apache/commons/jexl3/internal/Interpreter.java ./RegMiner4APR-Regression-Bugs/BIC/src/main/java/org/apache/commons/jexl3/internal/Interpreter.java
--- ./RegMiner4APR-Regression-Bugs/WORKING/src/main/java/org/apache/commons/jexl3/internal/Interpreter.java	2024-09-13 20:37:03.585831261 +1000
+++ ./RegMiner4APR-Regression-Bugs/BIC/src/main/java/org/apache/commons/jexl3/internal/Interpreter.java	2024-09-13 20:37:03.509830535 +1000
@@ -988,6 +988,7 @@
     @Override
     protected Object visit(ASTVar node, Object data) {
         int symbol = node.getSymbol();
+        // if we have a var, we have a scope thus a frame
         if (frame.has(symbol)) {
             return frame.get(symbol);
         } else {
@@ -1002,20 +1003,18 @@
         String name = node.getName();
         if (data == null) {
             int symbol = node.getSymbol();
-            if (symbol >= 0) {
-                if (frame.has(symbol)) {
-                    return frame.get(symbol);
-                } else if (node instanceof ASTVar) {
-                    // empty declaration
-                    return null;
-                }
+            // if we have a symbol, we have a scope thus a frame
+            if (symbol >= 0 && frame.has(symbol)) {
+                return frame.get(symbol);
             }
             Object value = context.get(name);
             if (value == null
-                    && !(node.jjtGetParent() instanceof ASTReference)
-                    && !context.has(name)
-                    && !node.isTernaryProtected()) {
-                return unsolvableVariable(node, name, true);
+                && !(node.jjtGetParent() instanceof ASTReference)
+                && !(context.has(name))
+                && !node.isTernaryProtected()) {
+                return jexl.safe
+                        ? null 
+                        : unsolvableVariable(node, name, !(node.getSymbol() >= 0 || context.has(name)));
             }
             return value;
         } else {
diff -r -u ./RegMiner4APR-Regression-Bugs/WORKING/src/test/java/org/apache/commons/jexl3/Issues200Test.java ./RegMiner4APR-Regression-Bugs/BIC/src/test/java/org/apache/commons/jexl3/Issues200Test.java
--- ./RegMiner4APR-Regression-Bugs/WORKING/src/test/java/org/apache/commons/jexl3/Issues200Test.java	2024-09-13 20:37:03.589831300 +1000
+++ ./RegMiner4APR-Regression-Bugs/BIC/src/test/java/org/apache/commons/jexl3/Issues200Test.java	2024-09-13 20:37:03.513830573 +1000
@@ -831,12 +831,33 @@
         src = "x = 1; if (true) var x = 2; x";
         script = jexl.createScript(src);
         result = script.execute(ctxt);
-        Assert.assertEquals(2,result);
+        Assert.assertEquals(2, result);
         // definition using shadowed global
         src = "x = 1; var x = x + 41; x";
         script = jexl.createScript(src);
         result = script.execute(ctxt);
-        Assert.assertEquals(42,result);
+        Assert.assertEquals(42, result);
+        // definition using shadowed global
+        src = "(x)->{ if (x==1) { var y = 2; } else if (x==2) { var y = 3; }; y }";
+        script = jexl.createScript(src);
+        result = script.execute(ctxt, 1);
+        Assert.assertEquals(2, result);
+        result = script.execute(ctxt, 2);
+        Assert.assertEquals(3, result);
+        try {
+            result = script.execute(ctxt, 0);
+            Assert.fail("should have failed!");
+        } catch (JexlException.Variable xvar) {
+            Assert.assertTrue(xvar.getMessage().contains("y"));
+        }
+        jexl = new JexlBuilder().strict(true).safe(true).create();
+        script = jexl.createScript(src);
+        try {
+            result = script.execute(ctxt, 0);
+        } catch (JexlException xvar) {
+            Assert.fail("should not have failed!");
+        }
+        Assert.assertNull(result);
     }
             
     @Test
