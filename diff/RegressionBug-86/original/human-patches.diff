diff -r -u ./RegMiner4APR-Regression-Bugs/BUGGY/java/src/com/google/template/soy/passes/ResolveExpressionTypesVisitor.java ./RegMiner4APR-Regression-Bugs/BFC/java/src/com/google/template/soy/passes/ResolveExpressionTypesVisitor.java
--- ./RegMiner4APR-Regression-Bugs/BUGGY/java/src/com/google/template/soy/passes/ResolveExpressionTypesVisitor.java	2024-09-08 01:36:27.581902913 +1000
+++ ./RegMiner4APR-Regression-Bugs/BFC/java/src/com/google/template/soy/passes/ResolveExpressionTypesVisitor.java	2024-09-08 01:36:27.521902492 +1000
@@ -17,6 +17,7 @@
 package com.google.template.soy.passes;
 
 import com.google.common.base.Equivalence.Wrapper;
+import com.google.common.base.Optional;
 import com.google.common.base.Preconditions;
 import com.google.common.collect.Maps;
 import com.google.template.soy.base.SourceLocation;
@@ -565,7 +566,18 @@
 
     @Override
     protected void visitDivideByOpNode(DivideByOpNode node) {
-      visitArithmeticOpNode(node);
+      // division is special. it is always coerced to a float
+      visitChildren(node);
+      SoyType left = node.getChild(0).getType();
+      SoyType right = node.getChild(1).getType();
+      if (SoyTypes.isNumericOrUnknown(left) && SoyTypes.isNumericOrUnknown(right)) {
+        node.setType(FloatType.getInstance());
+      } else {
+        // TODO(b/37359174): jssrc will do some type coercions here, tofu and jbcsrc will throw
+        // exceptions.  Consider making this a compiler error
+        node.setType(UnknownType.getInstance());
+      }
+      tryApplySubstitution(node);
     }
 
     @Override
@@ -921,21 +933,18 @@
 
     private void visitArithmeticOpNode(AbstractOperatorNode node) {
       visitChildren(node);
-      boolean isDivide = node instanceof DivideByOpNode;
       SoyType left = node.getChild(0).getType();
       SoyType right = node.getChild(1).getType();
-      SoyType result =
-          SoyTypes.getSoyTypeForBinaryOperator(
-              left, right, new SoyTypes.SoyTypeArithmeticOperator());
-      if (result == null) {
-        errorReporter.report(node.getSourceLocation(), INCOMPATIBLE_AIRTHMETIC_OP, left, right);
-        result = UnknownType.getInstance();
+      Optional<SoyType> arithmeticType = SoyTypes.computeLowestCommonTypeArithmetic(left, right);
+      if (arithmeticType.isPresent()) {
+        node.setType(arithmeticType.get());
+      } else {
+        // TODO(b/37359174): Be more strict about arithmetic operations as well.
+        // jssrc will do some type coercions here, tofu will throw exceptions.
+        // so the best idea is probably to add an error.
+        // 'number' is probably the most accurate (even if sometimes it will fail).
+        node.setType(SoyTypes.NUMBER_TYPE);
       }
-      // Division is special. it is always coerced to a float. For other operators, use the value
-      // returned by getSoyTypeForBinaryOperator.
-      // TODO(b/64098780): Should we add nullability to divide operator? Probably not, but we should
-      // also consolidate the behaviors when we divide something by 0 or null.
-      node.setType(isDivide ? FloatType.getInstance() : result);
       tryApplySubstitution(node);
     }
 
diff -r -u ./RegMiner4APR-Regression-Bugs/BUGGY/java/src/com/google/template/soy/types/SoyTypes.java ./RegMiner4APR-Regression-Bugs/BFC/java/src/com/google/template/soy/types/SoyTypes.java
--- ./RegMiner4APR-Regression-Bugs/BUGGY/java/src/com/google/template/soy/types/SoyTypes.java	2024-09-08 01:36:27.585902940 +1000
+++ ./RegMiner4APR-Regression-Bugs/BFC/java/src/com/google/template/soy/types/SoyTypes.java	2024-09-08 01:36:27.529902548 +1000
@@ -291,17 +291,4 @@
       }
     }
   }
-
-  /**
-   * Type resolver for all arithmetic operators (except plus operator). In particular, minus,
-   * multiply, divide and modulo.
-   */
-  public static final class SoyTypeArithmeticOperator implements SoyTypeBinaryOperator {
-    @Override
-    @Nullable
-    public SoyType resolve(SoyType left, SoyType right) {
-      Optional<SoyType> arithmeticType = SoyTypes.computeLowestCommonTypeArithmetic(left, right);
-      return arithmeticType.orNull();
-    }
-  }
 }
diff -r -u ./RegMiner4APR-Regression-Bugs/BUGGY/java/tests/com/google/template/soy/types/SoyTypesTest.java ./RegMiner4APR-Regression-Bugs/BFC/java/tests/com/google/template/soy/types/SoyTypesTest.java
--- ./RegMiner4APR-Regression-Bugs/BUGGY/java/tests/com/google/template/soy/types/SoyTypesTest.java	2024-09-08 01:36:27.593902996 +1000
+++ ./RegMiner4APR-Regression-Bugs/BFC/java/tests/com/google/template/soy/types/SoyTypesTest.java	2024-09-08 01:36:27.541902632 +1000
@@ -502,79 +502,4 @@
                 UnionType.of(NULL_TYPE, STRING_TYPE), UnionType.of(NULL_TYPE, INT_TYPE), plusOp))
         .isEqualTo(UnionType.of(NULL_TYPE, STRING_TYPE));
   }
-
-  @Test
-  public void testGetSoyTypeForBinaryOperatorArithmeticOp() {
-    SoyTypes.SoyTypeBinaryOperator plusOp = new SoyTypes.SoyTypeArithmeticOperator();
-    // All number types
-    assertThat(SoyTypes.getSoyTypeForBinaryOperator(INT_TYPE, FLOAT_TYPE, plusOp))
-        .isEqualTo(FLOAT_TYPE);
-    assertThat(SoyTypes.getSoyTypeForBinaryOperator(FLOAT_TYPE, INT_TYPE, plusOp))
-        .isEqualTo(FLOAT_TYPE);
-    assertThat(SoyTypes.getSoyTypeForBinaryOperator(INT_TYPE, INT_TYPE, plusOp))
-        .isEqualTo(INT_TYPE);
-    assertThat(SoyTypes.getSoyTypeForBinaryOperator(FLOAT_TYPE, FLOAT_TYPE, plusOp))
-        .isEqualTo(FLOAT_TYPE);
-    assertThat(SoyTypes.getSoyTypeForBinaryOperator(FLOAT_TYPE, NUMBER_TYPE, plusOp))
-        .isEqualTo(FLOAT_TYPE);
-    assertThat(SoyTypes.getSoyTypeForBinaryOperator(INT_TYPE, NUMBER_TYPE, plusOp))
-        .isEqualTo(NUMBER_TYPE);
-    assertThat(SoyTypes.getSoyTypeForBinaryOperator(NUMBER_TYPE, NUMBER_TYPE, plusOp))
-        .isEqualTo(NUMBER_TYPE);
-
-    // Unknown types are fine
-    assertThat(SoyTypes.getSoyTypeForBinaryOperator(FLOAT_TYPE, UNKNOWN_TYPE, plusOp))
-        .isEqualTo(UNKNOWN_TYPE);
-    assertThat(SoyTypes.getSoyTypeForBinaryOperator(UNKNOWN_TYPE, FLOAT_TYPE, plusOp))
-        .isEqualTo(UNKNOWN_TYPE);
-    assertThat(SoyTypes.getSoyTypeForBinaryOperator(UNKNOWN_TYPE, UNKNOWN_TYPE, plusOp))
-        .isEqualTo(UNKNOWN_TYPE);
-
-    // Any string types should be rejected
-    assertThat(SoyTypes.getSoyTypeForBinaryOperator(INT_TYPE, STRING_TYPE, plusOp)).isNull();
-    assertThat(SoyTypes.getSoyTypeForBinaryOperator(STRING_TYPE, FLOAT_TYPE, plusOp)).isNull();
-    assertThat(SoyTypes.getSoyTypeForBinaryOperator(STRING_TYPE, NUMBER_TYPE, plusOp)).isNull();
-    assertThat(SoyTypes.getSoyTypeForBinaryOperator(STRING_TYPE, STRING_TYPE, plusOp)).isNull();
-    assertThat(SoyTypes.getSoyTypeForBinaryOperator(INT_TYPE, URI_TYPE, plusOp)).isNull();
-    assertThat(SoyTypes.getSoyTypeForBinaryOperator(HTML_TYPE, STRING_TYPE, plusOp)).isNull();
-
-    // Arbitrary types are banned
-    assertThat(SoyTypes.getSoyTypeForBinaryOperator(ListType.of(STRING_TYPE), FLOAT_TYPE, plusOp))
-        .isNull();
-    assertThat(
-            SoyTypes.getSoyTypeForBinaryOperator(
-                INT_TYPE, MapType.of(INT_TYPE, STRING_TYPE), plusOp))
-        .isNull();
-    assertThat(
-            SoyTypes.getSoyTypeForBinaryOperator(
-                INT_TYPE, RecordType.of(ImmutableMap.of("a", INT_TYPE, "b", FLOAT_TYPE)), plusOp))
-        .isNull();
-
-    // If any of these combinations are incompatible, we should return null.
-    assertThat(
-            SoyTypes.getSoyTypeForBinaryOperator(
-                INT_TYPE, UnionType.of(BOOL_TYPE, FLOAT_TYPE, INT_TYPE), plusOp))
-        .isNull();
-    assertThat(
-            SoyTypes.getSoyTypeForBinaryOperator(
-                UnionType.of(STRING_TYPE, INT_TYPE),
-                UnionType.of(INT_TYPE, STRING_TYPE, ListType.of(INT_TYPE)),
-                plusOp))
-        .isNull();
-    assertThat(
-            SoyTypes.getSoyTypeForBinaryOperator(
-                UnionType.of(NULL_TYPE, STRING_TYPE), UnionType.of(NULL_TYPE, INT_TYPE), plusOp))
-        .isNull();
-
-    // Nullable types should be fine. However, null type itself is not allowed.
-    assertThat(SoyTypes.getSoyTypeForBinaryOperator(INT_TYPE, NULL_TYPE, plusOp)).isNull();
-    assertThat(
-            SoyTypes.getSoyTypeForBinaryOperator(
-                INT_TYPE, UnionType.of(NULL_TYPE, INT_TYPE), plusOp))
-        .isEqualTo(INT_TYPE);
-    assertThat(
-            SoyTypes.getSoyTypeForBinaryOperator(
-                UnionType.of(NULL_TYPE, FLOAT_TYPE), UnionType.of(NULL_TYPE, INT_TYPE), plusOp))
-        .isEqualTo(UnionType.of(NULL_TYPE, FLOAT_TYPE));
-  }
 }
