diff -r -u ./RegMiner4APR-Regression-Bugs/BUGGY/java/src/com/google/template/soy/passes/ResolveExpressionTypesVisitor.java ./RegMiner4APR-Regression-Bugs/BFC/java/src/com/google/template/soy/passes/ResolveExpressionTypesVisitor.java
--- ./RegMiner4APR-Regression-Bugs/BUGGY/java/src/com/google/template/soy/passes/ResolveExpressionTypesVisitor.java
+++ ./RegMiner4APR-Regression-Bugs/BFC/java/src/com/google/template/soy/passes/ResolveExpressionTypesVisitor.java
@@ -17,6 +17,7 @@
 package com.google.template.soy.passes;
 
 import com.google.common.base.Equivalence.Wrapper;
+import com.google.common.base.Optional;
 import com.google.common.base.Preconditions;
 import com.google.common.collect.Maps;
 import com.google.template.soy.base.SourceLocation;
@@ -565,7 +566,18 @@
 
     @Override
     protected void visitDivideByOpNode(DivideByOpNode node) {
-      visitArithmeticOpNode(node);
+      visitChildren(node);
+      SoyType left = node.getChild(0).getType();
+      SoyType right = node.getChild(1).getType();
+      if (SoyTypes.isNumericOrUnknown(left) && SoyTypes.isNumericOrUnknown(right)) {
+        node.setType(FloatType.getInstance());
+      } else {
+        node.setType(UnknownType.getInstance());
+      }
+      tryApplySubstitution(node);
     }
 
     @Override
@@ -921,21 +933,18 @@
 
     private void visitArithmeticOpNode(AbstractOperatorNode node) {
       visitChildren(node);
-      boolean isDivide = node instanceof DivideByOpNode;
       SoyType left = node.getChild(0).getType();
       SoyType right = node.getChild(1).getType();
-      SoyType result =
-          SoyTypes.getSoyTypeForBinaryOperator(
-              left, right, new SoyTypes.SoyTypeArithmeticOperator());
-      if (result == null) {
-        errorReporter.report(node.getSourceLocation(), INCOMPATIBLE_AIRTHMETIC_OP, left, right);
-        result = UnknownType.getInstance();
+      Optional<SoyType> arithmeticType = SoyTypes.computeLowestCommonTypeArithmetic(left, right);
+      if (arithmeticType.isPresent()) {
+        node.setType(arithmeticType.get());
+      } else {
+        node.setType(SoyTypes.NUMBER_TYPE);
       }
-      node.setType(isDivide ? FloatType.getInstance() : result);
       tryApplySubstitution(node);
     }
 
diff -r -u ./RegMiner4APR-Regression-Bugs/BUGGY/java/src/com/google/template/soy/types/SoyTypes.java ./RegMiner4APR-Regression-Bugs/BFC/java/src/com/google/template/soy/types/SoyTypes.java
--- ./RegMiner4APR-Regression-Bugs/BUGGY/java/src/com/google/template/soy/types/SoyTypes.java
+++ ./RegMiner4APR-Regression-Bugs/BFC/java/src/com/google/template/soy/types/SoyTypes.java
@@ -291,17 +291,4 @@
-  public static final class SoyTypeArithmeticOperator implements SoyTypeBinaryOperator {
-    @Override
-    @Nullable
-    public SoyType resolve(SoyType left, SoyType right) {
-      Optional<SoyType> arithmeticType = SoyTypes.computeLowestCommonTypeArithmetic(left, right);
-      return arithmeticType.orNull();
-    }
-  }
 }