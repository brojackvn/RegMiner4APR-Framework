diff -r -u ./RegMiner4APR-Regression-Bugs/WORKING/src/main/java/com/cronutils/model/field/constraint/FieldConstraints.java ./RegMiner4APR-Regression-Bugs/BIC/src/main/java/com/cronutils/model/field/constraint/FieldConstraints.java
--- ./RegMiner4APR-Regression-Bugs/WORKING/src/main/java/com/cronutils/model/field/constraint/FieldConstraints.java
+++ ./RegMiner4APR-Regression-Bugs/BIC/src/main/java/com/cronutils/model/field/constraint/FieldConstraints.java
@@ -72,6 +72,17 @@
 	public boolean isInRange(int value) {
 		return value >= getStartRange() && value <= getEndRange();
 	}
 	
 
     /**
      * Check if given period is compatible with the given range
      * 
      * @param period - to be checked
      * @return {@code true} if period is compatible, {@code false} otherwise.
      */
+    public boolean isPeriodInRange(int period) {
+        return period > 0 && period <= getEndRange() - getStartRange();
+    }
 
 	public Set<String> getStringMappingKeySet() {
 		return stringMapping.keySet();
diff -r -u ./RegMiner4APR-Regression-Bugs/WORKING/src/main/java/com/cronutils/model/field/expression/visitor/ValidationFieldExpressionVisitor.java ./RegMiner4APR-Regression-Bugs/BIC/src/main/java/com/cronutils/model/field/expression/visitor/ValidationFieldExpressionVisitor.java
--- ./RegMiner4APR-Regression-Bugs/WORKING/src/main/java/com/cronutils/model/field/expression/visitor/ValidationFieldExpressionVisitor.java
+++ ./RegMiner4APR-Regression-Bugs/BIC/src/main/java/com/cronutils/model/field/expression/visitor/ValidationFieldExpressionVisitor.java
 	/**
      * Check if given period is compatible with range
      * 
      * @param fieldValue
      *            - to be validated
      * @throws IllegalArgumentException
      *             - if not in range
      */
+    @VisibleForTesting
+    protected void isPeriodInRange(FieldValue<?> fieldValue) {
+        if (fieldValue instanceof IntegerFieldValue) {
+            int value = ((IntegerFieldValue) fieldValue).getValue();
+            if (!constraints.isPeriodInRange(value)) {
+                throw new IllegalArgumentException(String.format("Period %s not in range (0, %s]", value, constraints.getEndRange()-constraints.getStartRange()));
+            }
+        }
+    }
