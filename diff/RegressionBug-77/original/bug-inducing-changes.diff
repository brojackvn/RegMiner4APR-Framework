diff -r -u ./RegMiner4APR-Regression-Bugs/WORKING/.gitignore ./RegMiner4APR-Regression-Bugs/BIC/.gitignore
--- ./RegMiner4APR-Regression-Bugs/WORKING/.gitignore	2024-09-08 01:36:25.033885066 +1000
+++ ./RegMiner4APR-Regression-Bugs/BIC/.gitignore	2024-09-08 01:36:25.025885011 +1000
@@ -11,4 +11,5 @@
 zrefactor
 .gradle/
 build/
-local.properties
\ No newline at end of file
+local.properties
+bin/
diff -r -u ./RegMiner4APR-Regression-Bugs/WORKING/src/main/java/com/cronutils/model/field/constraint/FieldConstraints.java ./RegMiner4APR-Regression-Bugs/BIC/src/main/java/com/cronutils/model/field/constraint/FieldConstraints.java
--- ./RegMiner4APR-Regression-Bugs/WORKING/src/main/java/com/cronutils/model/field/constraint/FieldConstraints.java	2024-09-08 01:36:25.033885066 +1000
+++ ./RegMiner4APR-Regression-Bugs/BIC/src/main/java/com/cronutils/model/field/constraint/FieldConstraints.java	2024-09-08 01:36:25.029885038 +1000
@@ -72,6 +72,17 @@
 	public boolean isInRange(int value) {
 		return value >= getStartRange() && value <= getEndRange();
 	}
+	
+
+    /**
+     * Check if given period is compatible with the given range
+     * 
+     * @param period - to be checked
+     * @return {@code true} if period is compatible, {@code false} otherwise.
+     */
+    public boolean isPeriodInRange(int period) {
+        return period > 0 && period <= getEndRange() - getStartRange();
+    }
 
 	public Set<String> getStringMappingKeySet() {
 		return stringMapping.keySet();
diff -r -u ./RegMiner4APR-Regression-Bugs/WORKING/src/main/java/com/cronutils/model/field/expression/visitor/ValidationFieldExpressionVisitor.java ./RegMiner4APR-Regression-Bugs/BIC/src/main/java/com/cronutils/model/field/expression/visitor/ValidationFieldExpressionVisitor.java
--- ./RegMiner4APR-Regression-Bugs/WORKING/src/main/java/com/cronutils/model/field/expression/visitor/ValidationFieldExpressionVisitor.java	2024-09-08 01:36:25.033885066 +1000
+++ ./RegMiner4APR-Regression-Bugs/BIC/src/main/java/com/cronutils/model/field/expression/visitor/ValidationFieldExpressionVisitor.java	2024-09-08 01:36:25.029885038 +1000
@@ -1,165 +1,183 @@
-/*
- * Copyright 2014 jmrozanec
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.cronutils.model.field.expression.visitor;
-
-import com.cronutils.StringValidations;
-import com.cronutils.model.field.constraint.FieldConstraints;
-import com.cronutils.model.field.expression.*;
-import com.cronutils.model.field.value.FieldValue;
-import com.cronutils.model.field.value.IntegerFieldValue;
-import com.cronutils.model.field.value.SpecialChar;
-import com.cronutils.model.field.value.SpecialCharFieldValue;
-import com.cronutils.utils.VisibleForTesting;
-
-public class ValidationFieldExpressionVisitor implements FieldExpressionVisitor {
-
-	private static final String OORANGE = "Value %s not in range [%s, %s]";
-	private static final String EMPTY_STRING = "";
-
-	private FieldConstraints constraints;
-	private StringValidations stringValidations;
-	private boolean strictRanges;
-
-	public ValidationFieldExpressionVisitor(FieldConstraints constraints, boolean strictRanges) {
-		this.constraints = constraints;
-		this.stringValidations = new StringValidations(constraints);
-		this.strictRanges = strictRanges;
-	}
-
-	protected ValidationFieldExpressionVisitor(FieldConstraints constraints, StringValidations stringValidation, boolean strictRanges) {
-        this.constraints = constraints;
-        this.stringValidations = stringValidation;
-        this.strictRanges = strictRanges;
-    }
-
-	
-	@Override
-	public FieldExpression visit(FieldExpression expression) {
-		String unsupportedChars = stringValidations.removeValidChars(expression.asString());
-		if (EMPTY_STRING.equals(unsupportedChars)) {
-			if (expression instanceof Always) {
-				return visit((Always) expression);
-			}
-			if (expression instanceof And) {
-				return visit((And) expression);
-			}
-			if (expression instanceof Between) {
-				return visit((Between) expression);
-			}
-			if (expression instanceof Every) {
-				return visit((Every) expression);
-			}
-			if (expression instanceof On) {
-				return visit((On) expression);
-			}
-			if (expression instanceof QuestionMark) {
-				return visit((QuestionMark) expression);
-			}
-		}
-		throw new IllegalArgumentException(
-				String.format("Invalid chars in expression! Expression: %s Invalid chars: %s",
-						expression.asString(), unsupportedChars)
-		);
-	}
-
-	@Override
-	public Always visit(Always always) {
-		return always;
-	}
-
-    @Override
-    public And visit(And and) {
-        for(FieldExpression expression: and.getExpressions()) {
-            visit(expression);
-        }
-        return and;
-    }
-
-	@Override
-	public Between visit(Between between) {
-		preConditions(between);
-
-		if (strictRanges && between.getFrom() instanceof IntegerFieldValue && between.getTo() instanceof IntegerFieldValue) {
-			int from = ((IntegerFieldValue) between.getFrom()).getValue();
-			int to = ((IntegerFieldValue) between.getTo()).getValue();
-			if (from > to) {
-				throw new IllegalArgumentException(String.format("Invalid range! [%s,%s]", from, to));
-			}
-		}
-
-		return between;
-	}
-
-	private void preConditions(Between between) {
-		isInRange(between.getFrom());
-		isInRange(between.getTo());
-		if (isSpecialCharNotL(between.getFrom()) || isSpecialCharNotL(between.getTo())) {
-			throw new IllegalArgumentException("No special characters allowed in range, except for 'L'");
-		}
-	}
-
-	@Override
-	public Every visit(Every every) {
-		if (every.getExpression() instanceof Between) {
-			visit((Between) every.getExpression());
-		}
-		if (every.getExpression() instanceof On) {
-			visit((On) every.getExpression());
-		}
-		isInRange(every.getPeriod());
-		return every;
-	}
-
-	@Override
-	public On visit(On on) {
-		if (!isDefault(on.getTime())) {
-			isInRange(on.getTime());
-		}
-		if (!isDefault(on.getNth())) {
-			isInRange(on.getNth());
-		}
-		return on;
-	}
-
-	@Override
-	public QuestionMark visit(QuestionMark questionMark) {
-		return questionMark;
-	}
-
-	/**
-	 * Check if given number is greater or equal to start range and minor or equal to end range
-	 * 
-	 * @param fieldValue
-	 *            - to be validated
-	 * @throws IllegalArgumentException
-	 *             - if not in range
-	 */
-	@VisibleForTesting
-	protected void isInRange(FieldValue<?> fieldValue) {
-		if (fieldValue instanceof IntegerFieldValue) {
-			int value = ((IntegerFieldValue) fieldValue).getValue();
-			if (!constraints.isInRange(value)) {
-				throw new IllegalArgumentException(String.format(OORANGE, value, constraints.getStartRange(), constraints.getEndRange()));
-			}
-		}
-	}
-
-	@VisibleForTesting
-	protected boolean isDefault(FieldValue<?> fieldValue) {
-		return fieldValue instanceof IntegerFieldValue && ((IntegerFieldValue) fieldValue).getValue() == -1;
-	}
-
-	protected boolean isSpecialCharNotL(FieldValue<?> fieldValue) {
-		return fieldValue instanceof SpecialCharFieldValue && !SpecialChar.L.equals(fieldValue.getValue());
-	}
-}
+/*
+ * Copyright 2014 jmrozanec
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.cronutils.model.field.expression.visitor;
+
+import com.cronutils.StringValidations;
+import com.cronutils.model.field.constraint.FieldConstraints;
+import com.cronutils.model.field.expression.*;
+import com.cronutils.model.field.value.FieldValue;
+import com.cronutils.model.field.value.IntegerFieldValue;
+import com.cronutils.model.field.value.SpecialChar;
+import com.cronutils.model.field.value.SpecialCharFieldValue;
+import com.cronutils.utils.VisibleForTesting;
+
+public class ValidationFieldExpressionVisitor implements FieldExpressionVisitor {
+
+	private static final String OORANGE = "Value %s not in range [%s, %s]";
+	private static final String EMPTY_STRING = "";
+
+	private FieldConstraints constraints;
+	private StringValidations stringValidations;
+	private boolean strictRanges;
+
+	public ValidationFieldExpressionVisitor(FieldConstraints constraints, boolean strictRanges) {
+		this.constraints = constraints;
+		this.stringValidations = new StringValidations(constraints);
+		this.strictRanges = strictRanges;
+	}
+
+	protected ValidationFieldExpressionVisitor(FieldConstraints constraints, StringValidations stringValidation, boolean strictRanges) {
+        this.constraints = constraints;
+        this.stringValidations = stringValidation;
+        this.strictRanges = strictRanges;
+    }
+
+	
+	@Override
+	public FieldExpression visit(FieldExpression expression) {
+		String unsupportedChars = stringValidations.removeValidChars(expression.asString());
+		if (EMPTY_STRING.equals(unsupportedChars)) {
+			if (expression instanceof Always) {
+				return visit((Always) expression);
+			}
+			if (expression instanceof And) {
+				return visit((And) expression);
+			}
+			if (expression instanceof Between) {
+				return visit((Between) expression);
+			}
+			if (expression instanceof Every) {
+				return visit((Every) expression);
+			}
+			if (expression instanceof On) {
+				return visit((On) expression);
+			}
+			if (expression instanceof QuestionMark) {
+				return visit((QuestionMark) expression);
+			}
+		}
+		throw new IllegalArgumentException(
+				String.format("Invalid chars in expression! Expression: %s Invalid chars: %s",
+						expression.asString(), unsupportedChars)
+		);
+	}
+
+	@Override
+	public Always visit(Always always) {
+		return always;
+	}
+
+    @Override
+    public And visit(And and) {
+        for(FieldExpression expression: and.getExpressions()) {
+            visit(expression);
+        }
+        return and;
+    }
+
+	@Override
+	public Between visit(Between between) {
+		preConditions(between);
+
+		if (strictRanges && between.getFrom() instanceof IntegerFieldValue && between.getTo() instanceof IntegerFieldValue) {
+			int from = ((IntegerFieldValue) between.getFrom()).getValue();
+			int to = ((IntegerFieldValue) between.getTo()).getValue();
+			if (from > to) {
+				throw new IllegalArgumentException(String.format("Invalid range! [%s,%s]", from, to));
+			}
+		}
+
+		return between;
+	}
+
+	private void preConditions(Between between) {
+		isInRange(between.getFrom());
+		isInRange(between.getTo());
+		if (isSpecialCharNotL(between.getFrom()) || isSpecialCharNotL(between.getTo())) {
+			throw new IllegalArgumentException("No special characters allowed in range, except for 'L'");
+		}
+	}
+
+	@Override
+	public Every visit(Every every) {
+		if (every.getExpression() instanceof Between) {
+			visit((Between) every.getExpression());
+		}
+		if (every.getExpression() instanceof On) {
+			visit((On) every.getExpression());
+		}
+		isPeriodInRange(every.getPeriod());
+		return every;
+	}
+
+	@Override
+	public On visit(On on) {
+		if (!isDefault(on.getTime())) {
+			isInRange(on.getTime());
+		}
+		if (!isDefault(on.getNth())) {
+			isInRange(on.getNth());
+		}
+		return on;
+	}
+
+	@Override
+	public QuestionMark visit(QuestionMark questionMark) {
+		return questionMark;
+	}
+
+	/**
+	 * Check if given number is greater or equal to start range and minor or equal to end range
+	 * 
+	 * @param fieldValue
+	 *            - to be validated
+	 * @throws IllegalArgumentException
+	 *             - if not in range
+	 */
+	@VisibleForTesting
+	protected void isInRange(FieldValue<?> fieldValue) {
+		if (fieldValue instanceof IntegerFieldValue) {
+			int value = ((IntegerFieldValue) fieldValue).getValue();
+			if (!constraints.isInRange(value)) {
+				throw new IllegalArgumentException(String.format(OORANGE, value, constraints.getStartRange(), constraints.getEndRange()));
+			}
+		}
+	}
+	
+	/**
+     * Check if given period is compatible with range
+     * 
+     * @param fieldValue
+     *            - to be validated
+     * @throws IllegalArgumentException
+     *             - if not in range
+     */
+    @VisibleForTesting
+    protected void isPeriodInRange(FieldValue<?> fieldValue) {
+        if (fieldValue instanceof IntegerFieldValue) {
+            int value = ((IntegerFieldValue) fieldValue).getValue();
+            if (!constraints.isPeriodInRange(value)) {
+                throw new IllegalArgumentException(String.format("Period %s not in range (0, %s]", value, constraints.getEndRange()-constraints.getStartRange()));
+            }
+        }
+    }
+
+	@VisibleForTesting
+	protected boolean isDefault(FieldValue<?> fieldValue) {
+		return fieldValue instanceof IntegerFieldValue && ((IntegerFieldValue) fieldValue).getValue() == -1;
+	}
+
+	protected boolean isSpecialCharNotL(FieldValue<?> fieldValue) {
+		return fieldValue instanceof SpecialCharFieldValue && !SpecialChar.L.equals(fieldValue.getValue());
+	}
+}
diff -r -u ./RegMiner4APR-Regression-Bugs/WORKING/src/test/java/com/cronutils/parser/CronParserTest.java ./RegMiner4APR-Regression-Bugs/BIC/src/test/java/com/cronutils/parser/CronParserTest.java
--- ./RegMiner4APR-Regression-Bugs/WORKING/src/test/java/com/cronutils/parser/CronParserTest.java	2024-09-08 01:36:25.037885095 +1000
+++ ./RegMiner4APR-Regression-Bugs/BIC/src/test/java/com/cronutils/parser/CronParserTest.java	2024-09-08 01:36:25.029885038 +1000
@@ -1,21 +1,23 @@
 package com.cronutils.parser;
 
+import com.cronutils.model.CronType;
 import com.cronutils.model.definition.CronDefinition;
+import com.cronutils.model.definition.CronDefinitionBuilder;
 import com.cronutils.model.field.CronFieldName;
 import com.cronutils.model.field.constraint.FieldConstraintsBuilder;
 import com.cronutils.model.field.definition.FieldDefinition;
 import com.google.common.collect.Sets;
-
-import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.rules.ExpectedException;
 import org.mockito.Mock;
-import org.mockito.Mockito;
 import org.mockito.MockitoAnnotations;
 
 import java.util.Set;
+
+import static org.junit.Assert.assertNotNull;
+import static org.mockito.Mockito.when;
 /*
  * Copyright 2015 jmrozanec
  * Licensed under the Apache License, Version 2.0 (the "License");
@@ -46,7 +48,7 @@
     @Test(expected = IllegalArgumentException.class)
     public void testParseEmptyExpression() throws Exception {
         Set<FieldDefinition> set = Sets.newHashSet();
-        Mockito.when(definition.getFieldDefinitions()).thenReturn(set);
+        when(definition.getFieldDefinitions()).thenReturn(set);
         parser = new CronParser(definition);
 
         parser.parse("");
@@ -56,7 +58,7 @@
     public void testParseNoMatchingExpression() throws Exception {
         Set<FieldDefinition> set = Sets.newHashSet();
         set.add(new FieldDefinition(CronFieldName.SECOND, FieldConstraintsBuilder.instance().createConstraintsInstance()));
-        Mockito.when(definition.getFieldDefinitions()).thenReturn(set);
+        when(definition.getFieldDefinitions()).thenReturn(set);
         parser = new CronParser(definition);
 
         parser.parse("* *");
@@ -66,13 +68,13 @@
     public void testParseIncompleteEvery() throws Exception {
         Set<FieldDefinition> set = Sets.newHashSet();
         set.add(new FieldDefinition(CronFieldName.SECOND, FieldConstraintsBuilder.instance().createConstraintsInstance()));
-        Mockito.when(definition.getFieldDefinitions()).thenReturn(set);
+        when(definition.getFieldDefinitions()).thenReturn(set);
         parser = new CronParser(definition);
 
         expectedException.expect(IllegalArgumentException.class);
         expectedException.expectMessage("Missing steps for expression: */");
 
-        Assert.assertNotNull(parser.parse("*/"));
+        assertNotNull(parser.parse("*/"));
     }
 
 
@@ -97,14 +99,42 @@
         set.add(dom);
         set.add(month);
         set.add(dow);
-        Mockito.when(definition.getFieldDefinitions()).thenReturn(set);
-        Mockito.when(definition.getFieldDefinition(CronFieldName.MINUTE)).thenReturn(minute);
-        Mockito.when(definition.getFieldDefinition(CronFieldName.HOUR)).thenReturn(hour);
-        Mockito.when(definition.getFieldDefinition(CronFieldName.DAY_OF_MONTH)).thenReturn(dom);
-        Mockito.when(definition.getFieldDefinition(CronFieldName.MONTH)).thenReturn(month);
-        Mockito.when(definition.getFieldDefinition(CronFieldName.DAY_OF_WEEK)).thenReturn(dow);
+        when(definition.getFieldDefinitions()).thenReturn(set);
+        when(definition.getFieldDefinition(CronFieldName.MINUTE)).thenReturn(minute);
+        when(definition.getFieldDefinition(CronFieldName.HOUR)).thenReturn(hour);
+        when(definition.getFieldDefinition(CronFieldName.DAY_OF_MONTH)).thenReturn(dom);
+        when(definition.getFieldDefinition(CronFieldName.MONTH)).thenReturn(month);
+        when(definition.getFieldDefinition(CronFieldName.DAY_OF_WEEK)).thenReturn(dow);
         parser = new CronParser(definition);
 
         parser.parse("* *   * * *");
     }
-}
\ No newline at end of file
+    
+    /**
+     * Corresponds to issue#148
+     * https://github.com/jmrozanec/cron-utils/issues/148
+     */
+    @Test
+    public void testParseEveryXyears() {
+        CronDefinition quartzDefinition = CronDefinitionBuilder.instanceDefinitionFor(CronType.QUARTZ);
+        parser = new CronParser(quartzDefinition);
+        
+        parser.parse("0/59 0/59 0/23 1/30 1/11 ? 2017/3");
+    }
+    
+    @Test(expected=IllegalArgumentException.class)
+    public void testRejectionOfZeroPeriod() {
+        CronDefinition quartzDefinition = CronDefinitionBuilder.instanceDefinitionFor(CronType.QUARTZ);
+        parser = new CronParser(quartzDefinition);
+        
+        parser.parse("0/0 0 0 1 1 ? 2017/3");
+    }
+    
+    @Test(expected=IllegalArgumentException.class)
+    public void testRejectionOfPeriodUpperLimitExceedance() {
+        CronDefinition quartzDefinition = CronDefinitionBuilder.instanceDefinitionFor(CronType.QUARTZ);
+        parser = new CronParser(quartzDefinition);
+        
+        parser.parse("0/60 0 0 1 1 ? 2017/3");
+    }
+}
