diff -r -u ./RegMiner4APR-Regression-Bugs/WORKING/src/main/java/org/cactoos/collection/CollectionEnvelope.java ./RegMiner4APR-Regression-Bugs/BIC/src/main/java/org/cactoos/collection/CollectionEnvelope.java
--- ./RegMiner4APR-Regression-Bugs/WORKING/src/main/java/org/cactoos/collection/CollectionEnvelope.java	2024-09-08 01:36:13.633805224 +1000
+++ ./RegMiner4APR-Regression-Bugs/BIC/src/main/java/org/cactoos/collection/CollectionEnvelope.java	2024-09-08 01:36:13.565804749 +1000
@@ -27,19 +27,23 @@
 import java.util.Iterator;
 import org.cactoos.Scalar;
 import org.cactoos.iterator.Immutable;
+import org.cactoos.scalar.And;
+import org.cactoos.scalar.Folded;
+import org.cactoos.scalar.InheritanceLevel;
+import org.cactoos.scalar.Or;
+import org.cactoos.scalar.SumOfIntScalar;
 import org.cactoos.scalar.UncheckedScalar;
 
 /**
  * Base collection.
  *
  * <p>There is no thread-safety guarantee.</p>
- *
  * @param <X> Element type
- * @since 0.23
  * @todo #844:30min Implement methods equals and hashCode for this class.
- *  Implementation should rely on the items of the nested collection, but not
- *  on default JVM impl. Class {@link org.cactoos.map.MapEnvelope} can be used
- *  as an example.
+ * Implementation should rely on the items of the nested collection, but not
+ * on default JVM impl. Class {@link org.cactoos.map.MapEnvelope} can be used
+ * as an example.
+ * @since 0.23
  * @checkstyle AbstractClassNameCheck (500 lines)
  */
 @SuppressWarnings(
@@ -147,4 +151,48 @@
         return this.col.value().toString();
     }
 
+    @Override
+    public final boolean equals(final Object other) {
+        return new UncheckedScalar<>(
+            new And(
+                new Or(
+                    () -> new InheritanceLevel(
+                        other.getClass(), Collection.class
+                    ).value() > -1,
+                    () -> new InheritanceLevel(
+                        other.getClass(), CollectionEnvelope.class
+                    ).value() > -1
+                ),
+                () -> {
+                    final Collection<?> compared = (Collection<?>) other;
+                    return this.size() == compared.size();
+                },
+                () -> {
+                    final Iterable<?> compared = (Iterable<?>) other;
+                    final Iterator<?> iterator = compared.iterator();
+                    return new UncheckedScalar<>(
+                        new And(
+                            (X input) -> input.equals(iterator.next()),
+                            this
+                        )
+                    ).value();
+                }
+            )
+        ).value();
+    }
+
+    // @checkstyle MagicNumberCheck (30 lines)
+    @Override
+    public final int hashCode() {
+        return new UncheckedScalar<>(
+            new Folded<>(
+                42,
+                (hash, entry) -> new SumOfIntScalar(
+                    () -> 37 * hash,
+                    entry::hashCode
+                ).value(),
+                this
+            )
+        ).value();
+    }
 }
diff -r -u ./RegMiner4APR-Regression-Bugs/WORKING/src/main/java/org/cactoos/list/ListEnvelope.java ./RegMiner4APR-Regression-Bugs/BIC/src/main/java/org/cactoos/list/ListEnvelope.java
--- ./RegMiner4APR-Regression-Bugs/WORKING/src/main/java/org/cactoos/list/ListEnvelope.java	2024-09-08 01:36:13.645805309 +1000
+++ ./RegMiner4APR-Regression-Bugs/BIC/src/main/java/org/cactoos/list/ListEnvelope.java	2024-09-08 01:36:13.573804804 +1000
@@ -114,16 +114,6 @@
     }
 
     @Override
-    public boolean equals(final Object obj) {
-        return this.list.value().equals(obj);
-    }
-
-    @Override
-    public int hashCode() {
-        return this.list.value().hashCode();
-    }
-
-    @Override
     public String toString() {
         return this.list.value().toString();
     }
