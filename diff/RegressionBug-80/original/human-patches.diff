diff -r -u ./RegMiner4APR-Regression-Bugs/BUGGY/src/main/java/org/springframework/hateoas/UriTemplate.java ./RegMiner4APR-Regression-Bugs/BFC/src/main/java/org/springframework/hateoas/UriTemplate.java
--- ./RegMiner4APR-Regression-Bugs/BUGGY/src/main/java/org/springframework/hateoas/UriTemplate.java	2024-09-08 01:36:25.373887448 +1000
+++ ./RegMiner4APR-Regression-Bugs/BFC/src/main/java/org/springframework/hateoas/UriTemplate.java	2024-09-08 01:36:25.345887252 +1000
@@ -58,10 +58,11 @@
 	private static final Map<String, UriTemplate> CACHE = new ConcurrentReferenceHashMap<>();
 
 	private final TemplateVariables variables;
-	private String toString;
 	private String baseUri;
 	private transient UriBuilderFactory factory;
 
+	private String toString;
+
 	/**
 	 * Creates a new {@link UriTemplate} using the given template string.
 	 *
@@ -106,18 +107,21 @@
 	}
 
 	/**
-	 * Creates a new {@link UriTemplate} from the given base URI and {@link TemplateVariables}.
+	 * Creates a new {@link UriTemplate} from the given base URI, {@link TemplateVariables} and {@link UriBuilderFactory}.
 	 *
 	 * @param baseUri must not be {@literal null} or empty.
 	 * @param variables must not be {@literal null}.
+	 * @param factory must not be {@literal null}.
 	 */
-	UriTemplate(String baseUri, TemplateVariables variables) {
+	private UriTemplate(String baseUri, TemplateVariables variables, UriBuilderFactory factory) {
 
 		Assert.hasText(baseUri, "Base URI must not be null or empty!");
 		Assert.notNull(variables, "Template variables must not be null!");
+		Assert.notNull(factory, "UriBuilderFactory must not be null!");
 
 		this.baseUri = baseUri;
 		this.variables = variables;
+		this.factory = factory;
 	}
 
 	/**
@@ -179,7 +183,7 @@
 			result.add(variable);
 		}
 
-		return new UriTemplate(baseUri, this.variables.concat(result));
+		return new UriTemplate(baseUri, this.variables.concat(result), this.factory);
 	}
 
 	/**
