diff -r -u ./RegMiner4APR-Regression-Bugs/WORKING/java/src/com/google/template/soy/jssrc/dsl/CodeChunk.java ./RegMiner4APR-Regression-Bugs/BIC/java/src/com/google/template/soy/jssrc/dsl/CodeChunk.java
--- ./RegMiner4APR-Regression-Bugs/WORKING/java/src/com/google/template/soy/jssrc/dsl/CodeChunk.java	2024-09-08 01:36:28.209907311 +1000
+++ ./RegMiner4APR-Regression-Bugs/BIC/java/src/com/google/template/soy/jssrc/dsl/CodeChunk.java	2024-09-08 01:36:28.165907002 +1000
@@ -63,8 +63,8 @@
   public static final WithValue LITERAL_TRUE = id("true");
   public static final WithValue LITERAL_FALSE = id("false");
   public static final WithValue LITERAL_NULL = id("null");
-  public static final WithValue LITERAL_EMPTY_STRING = Leaf.create("''");
-  public static final WithValue EMPTY_OBJECT_LITERAL = Leaf.create("{}");
+  public static final WithValue LITERAL_EMPTY_STRING = Leaf.create("''", /* isCheap= */ true);
+  public static final WithValue EMPTY_OBJECT_LITERAL = Leaf.create("{}", /* isCheap= */ false);
 
   /** Creates a new code chunk representing the concatenation of the given chunks. */
   public static CodeChunk statements(CodeChunk first, CodeChunk... rest) {
@@ -93,7 +93,7 @@
    * Creates a new code chunk from the given expression. The expression's precedence is preserved.
    */
   public static WithValue fromExpr(JsExpr expr, Iterable<GoogRequire> requires) {
-    return Leaf.create(expr, requires);
+    return Leaf.create(expr, /* isCheap= */ false, requires);
   }
 
   /**
@@ -103,7 +103,7 @@
    */
   public static WithValue id(String id) {
     CodeChunkUtils.checkId(id);
-    return Leaf.create(id);
+    return Leaf.create(id, /* isCheap= */ true);
   }
   /**
    * Creates a code chunk representing a JavaScript identifier.
@@ -112,7 +112,7 @@
    */
   static WithValue id(String id, Iterable<GoogRequire> requires) {
     CodeChunkUtils.checkId(id);
-    return Leaf.create(id, requires);
+    return Leaf.create(id, /* isCheap= */ true, requires);
   }
 
   /**
@@ -162,19 +162,19 @@
     // forward slash in the string to get around this issue.
     escaped = escaped.replace("</script", "<\\/script");
 
-    return Leaf.create(escaped);
+    return Leaf.create(escaped, /* isCheap= */ true);
   }
 
   /** Creates a code chunk representing a JavaScript number literal. */
   public static WithValue number(long value) {
     Preconditions.checkArgument(
         IntegerNode.isInRange(value), "Number is outside JS safe integer range: %s", value);
-    return Leaf.create(Long.toString(value));
+    return Leaf.create(Long.toString(value), /* isCheap= */ true);
   }
 
   /** Creates a code chunk representing a JavaScript number literal. */
   public static WithValue number(double value) {
-    return Leaf.create(Double.toString(value));
+    return Leaf.create(Double.toString(value), /* isCheap= */ true);
   }
 
   /** Creates a code chunk that assigns value to a preexisting variable with the given name. */
@@ -489,6 +489,16 @@
      * <p>These are direct dependencies only, not transitive.
      */
     public abstract ImmutableSet<CodeChunk> initialStatements();
+
+    /**
+     * Returns {@code true} if the expression represented by this code chunk is so trivial that it
+     * isn't worth storing it in a temporary if it needs to be referenced multiple times.
+     *
+     * <p>The default is {@code false}, only certain special code chunks return {@code true}.
+     */
+    public boolean isCheap() {
+      return false;
+    }
   }
 
   /**
@@ -666,6 +676,11 @@
       return CodeChunk.declare(newVarName(), rhs);
     }
 
+    /** Creates a code chunk declaring an automatically-named variable with no initializer. */
+    public VariableDeclaration declare() {
+      return VariableDeclaration.create(newVarName(), /*initializer=*/ null);
+    }
+
     /**
      * Returns a code chunk representing an if-then-else condition.
      *
diff -r -u ./RegMiner4APR-Regression-Bugs/WORKING/java/src/com/google/template/soy/jssrc/dsl/Conditional.java ./RegMiner4APR-Regression-Bugs/BIC/java/src/com/google/template/soy/jssrc/dsl/Conditional.java
--- ./RegMiner4APR-Regression-Bugs/WORKING/java/src/com/google/template/soy/jssrc/dsl/Conditional.java	2024-09-08 01:36:28.209907311 +1000
+++ ./RegMiner4APR-Regression-Bugs/BIC/java/src/com/google/template/soy/jssrc/dsl/Conditional.java	2024-09-08 01:36:28.165907002 +1000
@@ -144,7 +144,7 @@
    */
   CodeChunk.WithValue asConditionalExpression(CodeChunk.Generator codeGenerator) {
     Preconditions.checkState(everyBranchHasAValue());
-    VariableDeclaration decl = codeGenerator.declare(WithValue.LITERAL_NULL);
+    VariableDeclaration decl = codeGenerator.declare();
     CodeChunk.WithValue var = decl.ref();
     ConditionalBuilder builder = null;
     for (IfThenPair oldCondition : conditions()) {
diff -r -u ./RegMiner4APR-Regression-Bugs/WORKING/java/src/com/google/template/soy/jssrc/dsl/Leaf.java ./RegMiner4APR-Regression-Bugs/BIC/java/src/com/google/template/soy/jssrc/dsl/Leaf.java
--- ./RegMiner4APR-Regression-Bugs/WORKING/java/src/com/google/template/soy/jssrc/dsl/Leaf.java	2024-09-08 01:36:28.209907311 +1000
+++ ./RegMiner4APR-Regression-Bugs/BIC/java/src/com/google/template/soy/jssrc/dsl/Leaf.java	2024-09-08 01:36:28.165907002 +1000
@@ -28,22 +28,24 @@
 @AutoValue
 @Immutable
 abstract class Leaf extends CodeChunk.WithValue {
-  static WithValue create(String text, Iterable<GoogRequire> require) {
-    return create(new JsExpr(text, Integer.MAX_VALUE), ImmutableSet.copyOf(require));
+  static WithValue create(String text, boolean isCheap, Iterable<GoogRequire> require) {
+    return create(new JsExpr(text, Integer.MAX_VALUE), isCheap, ImmutableSet.copyOf(require));
   }
 
-  static Leaf create(String text) {
-    return create(new JsExpr(text, Integer.MAX_VALUE), ImmutableSet.<GoogRequire>of());
+  static Leaf create(String text, boolean isCheap) {
+    return create(new JsExpr(text, Integer.MAX_VALUE), isCheap, ImmutableSet.<GoogRequire>of());
   }
 
-  static Leaf create(JsExpr value, Iterable<GoogRequire> requires) {
-    return new AutoValue_Leaf(value, ImmutableSet.copyOf(requires));
+  static Leaf create(JsExpr value, boolean isCheap, Iterable<GoogRequire> requires) {
+    return new AutoValue_Leaf(value, ImmutableSet.copyOf(requires), isCheap);
   }
-  
+
   abstract JsExpr value();
 
   abstract ImmutableSet<GoogRequire> requires();
 
+  @Override
+  public abstract boolean isCheap();
 
   @Override
   void doFormatInitialStatements(FormattingContext ctx) {
diff -r -u ./RegMiner4APR-Regression-Bugs/WORKING/java/src/com/google/template/soy/jssrc/internal/NullSafeAccumulator.java ./RegMiner4APR-Regression-Bugs/BIC/java/src/com/google/template/soy/jssrc/internal/NullSafeAccumulator.java
--- ./RegMiner4APR-Regression-Bugs/WORKING/java/src/com/google/template/soy/jssrc/internal/NullSafeAccumulator.java	2024-09-08 01:36:28.213907339 +1000
+++ ./RegMiner4APR-Regression-Bugs/BIC/java/src/com/google/template/soy/jssrc/internal/NullSafeAccumulator.java	2024-09-08 01:36:28.169907030 +1000
@@ -22,11 +22,11 @@
 
 import com.google.auto.value.AutoValue;
 import com.google.common.base.Preconditions;
-import com.google.common.collect.ImmutableList;
 import com.google.errorprone.annotations.ForOverride;
 import com.google.template.soy.jssrc.dsl.CodeChunk;
 import com.google.template.soy.jssrc.dsl.CodeChunk.WithValue;
 import java.util.ArrayList;
+import java.util.Iterator;
 import java.util.List;
 import javax.annotation.Nullable;
 
@@ -106,52 +106,51 @@
    * generate code to make sure the chain is non-null before performing the access.
    */
   CodeChunk.WithValue result(CodeChunk.Generator codeGenerator) {
-    // First generate a list of every partial evaluation of the chain.
-    ImmutableList<CodeChunk.WithValue> intermediateValues = buildIntermediateValues();
-    Preconditions.checkState(intermediateValues.size() == chain.size() + 1);
-
-    // Walk backwards through the intermediate values. For any null-safe link in the chain,
-    // test the intermediate value against null before dereferencing it.
-    // For example, to translate a?.b.c, the rightmost link is not null-safe, so it translates to
-    // a.b.c. The next link is null-safe, so it translates to a == null ? null : a.b.c.
-    CodeChunk.WithValue cur = intermediateValues.get(intermediateValues.size() - 1);
-    for (int i = intermediateValues.size() - 2; i >= 0; --i) {
-      CodeChunk.WithValue chunk = intermediateValues.get(i);
-      boolean nullSafe = chain.get(i).nullSafe;
-      if (nullSafe) {
-        cur = ifExpression(chunk.doubleEqualsNull(), LITERAL_NULL).else_(cur).build(codeGenerator);
-      }
-    }
+    CodeChunk.WithValue accessChain = buildAccessChain(base, codeGenerator, chain.iterator());
 
     if (unpackFunction == null) {
-      return cur;
+      return accessChain;
     } else if (!isRepeated) {
       // It's okay if the whole chain evals to null. The unpack functions accept null.
-      return unpackFunction.call(cur);
+      return unpackFunction.call(accessChain);
     } else {
-      return GOOG_ARRAY_MAP.call(cur, unpackFunction);
+      return GOOG_ARRAY_MAP.call(accessChain, unpackFunction);
     }
   }
 
   /**
-   * Builds a list of intermediate values representing partial evaluation of the chain.
-   * For example, the chain {@code a?.b?.c.d} has four intermediate values:
+   * Builds the access chain.
+   *
+   * <p>For chains with no null-safe accessses this is a simple and direct approach. However, for
+   * null safe accesses we will stash base expressions into a temporary variable so we can generate
+   * multiple references to it.
+   *
+   * <p>For example:
+   *
    * <ol>
-   *   <li>{@code a}
-   *   <li>{@code a?.b}
-   *   <li>{@code a?.b?.c}
-   *   <li>{@code a?.b?.c.d}
+   *   <li>{@code $a.b} -> {@code a.b}
+   *   <li>{@code $a?.b} -> {@code var t = a; t == null ? null : a.b}
+   *   <li>{@code a?.b?.c} -> {@code var t = a; var r;if (t== null) {var t2 = a.b; r= t2 == null ?
+   *       null : t2.c}}
+   *   <li>{@code a?.b?.c.d} {@code var t = a; var r;if (t== null) {var t2 = a.b; r= t2 == null ?
+   *       null : t2.c.d}}
    * </ol>
    */
-  private ImmutableList<CodeChunk.WithValue> buildIntermediateValues() {
-    ImmutableList.Builder<CodeChunk.WithValue> builder = ImmutableList.builder();
-    CodeChunk.WithValue prev = base;
-    builder.add(prev);
-    for (ChainAccess link : chain) {
-      prev = link.extend(prev);
-      builder.add(prev);
+  private static CodeChunk.WithValue buildAccessChain(
+      CodeChunk.WithValue base, CodeChunk.Generator generator, Iterator<ChainAccess> chain) {
+    if (!chain.hasNext()) {
+      return base; // base case
+    }
+    ChainAccess link = chain.next();
+    if (link.nullSafe) {
+      if (!base.isCheap()) {
+        base = generator.declare(base).ref();
+      }
+      return ifExpression(base.doubleEqualsNull(), LITERAL_NULL)
+          .else_(buildAccessChain(link.extend(base), generator, chain))
+          .build(generator);
     }
-    return builder.build();
+    return buildAccessChain(link.extend(base), generator, chain);
   }
 
   /**
