diff -r -u ./RegMiner4APR-Regression-Bugs/WORKING/src/main/java/org/springframework/data/mapping/model/KotlinCopyMethod.java ./RegMiner4APR-Regression-Bugs/BIC/src/main/java/org/springframework/data/mapping/model/KotlinCopyMethod.java
--- ./RegMiner4APR-Regression-Bugs/WORKING/src/main/java/org/springframework/data/mapping/model/KotlinCopyMethod.java	2024-09-08 01:36:08.709770739 +1000
+++ ./RegMiner4APR-Regression-Bugs/BIC/src/main/java/org/springframework/data/mapping/model/KotlinCopyMethod.java	2024-09-08 01:36:08.661770403 +1000
@@ -20,11 +20,13 @@
 import kotlin.reflect.KFunction;
 import kotlin.reflect.KParameter;
 import kotlin.reflect.KParameter.Kind;
+import kotlin.reflect.KType;
 import kotlin.reflect.full.KClasses;
 import kotlin.reflect.jvm.ReflectJvmMapping;
 
 import java.lang.reflect.Method;
 import java.lang.reflect.Modifier;
+import java.lang.reflect.Type;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
@@ -37,7 +39,8 @@
 import org.springframework.util.Assert;
 
 /**
- * Value object to represent a Kotlin {@code copy} method.
+ * Value object to represent a Kotlin {@code copy} method. The lookup requires a {@code copy} method that matches the
+ * primary constructor of the class regardless of whether the primary constructor is the persistence constructor.
  *
  * @author Mark Paluch
  * @since 2.1
@@ -59,13 +62,14 @@
 		this.publicCopyMethod = publicCopyMethod;
 		this.syntheticCopyMethod = syntheticCopyMethod;
 		this.copyFunction = ReflectJvmMapping.getKotlinFunction(publicCopyMethod);
-		this.parameterCount = copyFunction.getParameters().size();
+		this.parameterCount = copyFunction != null ? copyFunction.getParameters().size() : 0;
 	}
 
 	/**
 	 * Attempt to lookup the Kotlin {@code copy} method. Lookup happens in two stages: Find the synthetic copy method and
 	 * then attempt to resolve its public variant.
 	 *
+	 * @param property the property that must be included in the copy method.
 	 * @param type the class.
 	 * @return {@link Optional} {@link KotlinCopyMethod}.
 	 */
@@ -155,7 +159,6 @@
 		return true;
 	}
 
-	@SuppressWarnings("unchecked")
 	private static Optional<Method> findPublicCopyMethod(Method defaultKotlinMethod) {
 
 		Class<?> type = defaultKotlinMethod.getDeclaringClass();
@@ -167,10 +170,7 @@
 			return Optional.empty();
 		}
 
-		List<KParameter> constructorArguments = primaryConstructor.getParameters() //
-				.stream() //
-				.filter(it -> it.getKind() == Kind.VALUE) //
-				.collect(Collectors.toList());
+		List<KParameter> constructorArguments = getComponentArguments(primaryConstructor);
 
 		return Arrays.stream(type.getDeclaredMethods()).filter(it -> it.getName().equals("copy") //
 				&& !it.isSynthetic() //
@@ -207,7 +207,7 @@
 
 			KParameter constructorParameter = constructorArguments.get(constructorArgIndex);
 
-			if (!constructorParameter.getName().equals(parameter.getName())
+			if (constructorParameter.getName() == null || !constructorParameter.getName().equals(parameter.getName())
 					|| !constructorParameter.getType().equals(parameter.getType())) {
 				return false;
 			}
@@ -220,15 +220,71 @@
 
 	private static Optional<Method> findSyntheticCopyMethod(Class<?> type) {
 
+		KClass<?> kotlinClass = JvmClassMappingKt.getKotlinClass(type);
+		KFunction<?> primaryConstructor = KClasses.getPrimaryConstructor(kotlinClass);
+
+		if (primaryConstructor == null) {
+			return Optional.empty();
+		}
+
 		return Arrays.stream(type.getDeclaredMethods()) //
 				.filter(it -> it.getName().equals("copy$default") //
 						&& Modifier.isStatic(it.getModifiers()) //
 						&& it.getReturnType().equals(type))
 				.filter(Method::isSynthetic) //
+				.filter(it -> matchesPrimaryConstructor(it.getParameterTypes(), primaryConstructor))
 				.findFirst();
 	}
 
 	/**
+	 * Verify that the {@code parameterTypes} match arguments of the {@link KFunction primaryConstructor}.
+	 */
+	private static boolean matchesPrimaryConstructor(Class<?>[] parameterTypes, KFunction<?> primaryConstructor) {
+
+		List<KParameter> constructorArguments = getComponentArguments(primaryConstructor);
+
+		int defaultingArgs = KotlinDefaultMask.from(primaryConstructor, kParameter -> false).getDefaulting().length;
+
+		if (parameterTypes.length != 1 /* $this */ + constructorArguments.size() + defaultingArgs + 1 /* object marker */) {
+			return false;
+		}
+
+		// $this comes first
+		if (!isAssignableFrom(parameterTypes[0], primaryConstructor.getReturnType())) {
+			return false;
+		}
+
+		for (int i = 0; i < constructorArguments.size(); i++) {
+
+			KParameter kParameter = constructorArguments.get(i);
+
+			if (!isAssignableFrom(parameterTypes[i + 1], kParameter.getType())) {
+				return false;
+			}
+		}
+
+		return true;
+	}
+
+	private static List<KParameter> getComponentArguments(KFunction<?> primaryConstructor) {
+		return primaryConstructor.getParameters() //
+				.stream() //
+				.filter(it -> it.getKind() == Kind.VALUE) //
+				.collect(Collectors.toList());
+	}
+
+	private static boolean isAssignableFrom(Class<?> target, KType source) {
+
+		Type parameterType = ReflectJvmMapping.getJavaType(source);
+
+		if (parameterType instanceof Class) {
+			return target.isAssignableFrom((Class<?>) parameterType);
+		}
+
+		return false;
+	}
+
+	/**
 	 * Value object to represent Kotlin {@literal copy$default} invocation metadata.
 	 *
 	 * @author Mark Paluch
diff -r -u ./RegMiner4APR-Regression-Bugs/WORKING/src/test/java/org/springframework/data/mapping/model/ClassGeneratingPropertyAccessorFactoryEntityTypeTests.java ./RegMiner4APR-Regression-Bugs/BIC/src/test/java/org/springframework/data/mapping/model/ClassGeneratingPropertyAccessorFactoryEntityTypeTests.java
--- ./RegMiner4APR-Regression-Bugs/WORKING/src/test/java/org/springframework/data/mapping/model/ClassGeneratingPropertyAccessorFactoryEntityTypeTests.java	2024-09-08 01:36:08.717770795 +1000
+++ ./RegMiner4APR-Regression-Bugs/BIC/src/test/java/org/springframework/data/mapping/model/ClassGeneratingPropertyAccessorFactoryEntityTypeTests.java	2024-09-08 01:36:08.673770487 +1000
@@ -18,10 +18,12 @@
 import static org.assertj.core.api.Assertions.*;
 
 import java.io.Serializable;
+import java.time.LocalDateTime;
 
 import org.junit.jupiter.api.Test;
 import org.springframework.data.annotation.Id;
 import org.springframework.data.mapping.PersistentEntity;
+import org.springframework.data.mapping.PersistentPropertyAccessor;
 import org.springframework.data.mapping.context.SampleMappingContext;
 import org.springframework.data.mapping.context.SamplePersistentProperty;
 import org.springframework.data.repository.core.EntityInformation;
@@ -32,6 +34,7 @@
  *
  * @author John Blum
  * @author Oliver Gierke
+ * @author Mark Paluch
  */
 public class ClassGeneratingPropertyAccessorFactoryEntityTypeTests {
 
@@ -53,6 +56,17 @@
 		assertThat(getEntityInformation(Person.class).getId(jonDoe)).isEqualTo(jonDoe.name);
 	}
 
+	@Test // #2324
+	public void shouldGeneratePropertyAccessorForKotlinClassWithMultipleCopyMethods() {
+
+		ClassGeneratingPropertyAccessorFactory factory = new ClassGeneratingPropertyAccessorFactory();
+		PersistentPropertyAccessor<WithCustomCopyMethod> propertyAccessor = factory.getPropertyAccessor(
+				mappingContext.getRequiredPersistentEntity(WithCustomCopyMethod.class),
+				new WithCustomCopyMethod("", "", "", 1, LocalDateTime.MAX, LocalDateTime.MAX, ""));
+
+		assertThat(propertyAccessor).isNotNull();
+	}
+
 	private EntityInformation<Object, Serializable> getEntityInformation(Class<?> type) {
 
 		PersistentEntity<Object, SamplePersistentProperty> entity = mappingContext.getRequiredPersistentEntity(type);
