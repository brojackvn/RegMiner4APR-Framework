diff -r -u ./RegMiner4APR-Regression-Bugs/WORKING/src/main/java/com/alibaba/fastjson/util/FieldInfo.java ./RegMiner4APR-Regression-Bugs/BIC/src/main/java/com/alibaba/fastjson/util/FieldInfo.java
--- ./RegMiner4APR-Regression-Bugs/WORKING/src/main/java/com/alibaba/fastjson/util/FieldInfo.java
+++ ./RegMiner4APR-Regression-Bugs/BIC/src/main/java/com/alibaba/fastjson/util/FieldInfo.java
@@ -192,7 +192,7 @@
 
         if (clazz != null && fieldClass == Object.class && fieldType instanceof TypeVariable) {
             TypeVariable<?> tv = (TypeVariable<?>) fieldType;
-            Type genericFieldType = getInheritGenericType(clazz, tv);
+            Type genericFieldType = getInheritGenericType(clazz, type, tv);
             if (genericFieldType != null) {
                 this.fieldClass = TypeUtils.getClass(genericFieldType);
                 this.fieldType = genericFieldType;
@@ -330,35 +310,71 @@
         return fieldType;
     }
 
-    public static Type getInheritGenericType(Class<?> clazz, TypeVariable<?> tv) {
-        Type type = null;
-        GenericDeclaration gd = tv.getGenericDeclaration();
-        Type superGenericType = clazz.getGenericSuperclass();
-        do {
-            type = clazz.getGenericSuperclass();
-            if (type == null) {
-                return null;
+    private static Type getInheritGenericType(Class<?> clazz, Type type, TypeVariable<?> tv) {
+        Class<?> gd = (Class<?>) tv.getGenericDeclaration();
+        Type[] arguments = null;
+        if (gd == clazz) {
             if (type instanceof ParameterizedType) {
                 ParameterizedType ptype = (ParameterizedType) type;

-                Type rawType = ptype.getRawType();
-                boolean eq = gd.equals(rawType) || (gd instanceof Class && rawType instanceof Class && ((Class) gd).isAssignableFrom((Class) rawType));
-                if (eq) {
-                    TypeVariable<?>[] tvs = gd.getTypeParameters();
-                    Type[] types = ptype.getActualTypeArguments();
-                    for (int i = 0; i < tvs.length; i++) {
-                        if (tv.equals(tvs[i])) {
-                            return types[i];
-                        }
-                    }
-                    return null;
+                arguments = ptype.getActualTypeArguments();
+            }
+        } else {
+            for (Class<?> c = clazz; c != null && c != Object.class && c != gd; c = c.getSuperclass()) {
+                Type superType = c.getGenericSuperclass();
+
+                if (superType instanceof ParameterizedType) {
+                    ParameterizedType p_superType = (ParameterizedType) superType;
+                    Type[] p_superType_args = p_superType.getActualTypeArguments();
+                    getArgument(p_superType_args, c.getTypeParameters(), arguments);
+                    arguments = p_superType_args;
                 }
             }
-            clazz = TypeUtils.getClass(type);
-        } while (type != null);
-        return null;
+        }
+        if (arguments == null) {
+            return null;
+        }
+        Type actualType = null;
+        TypeVariable<?>[] typeVariables = gd.getTypeParameters();
+        for (int j = 0; j < typeVariables.length; ++j) {
+            if (tv.equals(typeVariables[j])) {
+                actualType = arguments[j];
+                break;
+            }
+        }
+        return actualType;
     }
 
     public String toString() {
