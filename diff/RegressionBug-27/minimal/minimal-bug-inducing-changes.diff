diff -r -u ./RegMiner4APR-Regression-Bugs/WORKING/src/main/java/com/github/davidmoten/rtree/geometry/Geometries.java ./RegMiner4APR-Regression-Bugs/BIC/src/main/java/com/github/davidmoten/rtree/geometry/Geometries.java
--- ./RegMiner4APR-Regression-Bugs/WORKING/src/main/java/com/github/davidmoten/rtree/geometry/Geometries.java
+++ ./RegMiner4APR-Regression-Bugs/BIC/src/main/java/com/github/davidmoten/rtree/geometry/Geometries.java
@@ -1,6 +1,8 @@
 package com.github.davidmoten.rtree.geometry;
 
 import com.github.davidmoten.guavamini.annotations.VisibleForTesting;
+import com.github.davidmoten.rtree.geometry.internal.RectangleDoubleImpl;
+import com.github.davidmoten.rtree.geometry.internal.RectangleImpl;
 
 public final class Geometries {
 
@@ -17,7 +19,7 @@
     }
 
     public static Rectangle rectangle(double x1, double y1, double x2, double y2) {
-        return RectangleImpl.create(x1, y1, x2, y2);
+        return rectangleDouble(x1, y1, x2, y2);
     }
 
     public static Rectangle rectangle(float x1, float y1, float x2, float y2) {
@@ -54,6 +56,10 @@
         return rectangle(x1, lat1, x2, lat2);
     }
 
+    public static Rectangle rectangleDouble(double x1, double y1, double x2, double y2) {
+        return RectangleDoubleImpl.create(x1, y1, x2, y2);
+    }

     public static Point pointGeographic(double lon, double lat) {
         return point(normalizeLongitude(lon), lat);
     }
Only in ./RegMiner4APR-Regression-Bugs/BIC/src/main/java/com/github/davidmoten/rtree/geometry: internal
diff -r -u ./RegMiner4APR-Regression-Bugs/WORKING/src/main/java/com/github/davidmoten/rtree/geometry/Point.java ./RegMiner4APR-Regression-Bugs/BIC/src/main/java/com/github/davidmoten/rtree/geometry/Point.java
--- ./RegMiner4APR-Regression-Bugs/WORKING/src/main/java/com/github/davidmoten/rtree/geometry/Point.java
+++ ./RegMiner4APR-Regression-Bugs/BIC/src/main/java/com/github/davidmoten/rtree/geometry/Point.java
@@ -1,5 +1,7 @@
 package com.github.davidmoten.rtree.geometry;
 
+import com.github.davidmoten.rtree.geometry.internal.RectangleImpl;

 public final class Point implements Rectangle {
 
     private final float x;
@@ -132,4 +134,39 @@
         return 0;
     }
 
+    @Override
+    public double x1d() {
+        return x;
+    }
+
+    @Override
+    public double y1d() {
+        return y;
+    }
+
+    @Override
+    public double x2d() {
+        return x;
+    }
+
+    @Override
+    public double y2d() {
+        return y;
+    }
+
+    @Override
+    public double intersectionAreaD(Rectangle r) {
+        return intersectionArea(r);
+    }
+
+    @Override
+    public double perimeterD() {
+        return perimeter();
+    }
+
+    @Override
+    public double areaD() {
+        return area();
+    }
+
 }
Only in ./RegMiner4APR-Regression-Bugs/WORKING/src/main/java/com/github/davidmoten/rtree/geometry: RectangleDoubleImpl.java
Only in ./RegMiner4APR-Regression-Bugs/WORKING/src/main/java/com/github/davidmoten/rtree/geometry: RectangleDouble.java
Only in ./RegMiner4APR-Regression-Bugs/WORKING/src/main/java/com/github/davidmoten/rtree/geometry: RectangleImpl.java
diff -r -u ./RegMiner4APR-Regression-Bugs/WORKING/src/main/java/com/github/davidmoten/rtree/geometry/Rectangle.java ./RegMiner4APR-Regression-Bugs/BIC/src/main/java/com/github/davidmoten/rtree/geometry/Rectangle.java
--- ./RegMiner4APR-Regression-Bugs/WORKING/src/main/java/com/github/davidmoten/rtree/geometry/Rectangle.java
+++ ./RegMiner4APR-Regression-Bugs/BIC/src/main/java/com/github/davidmoten/rtree/geometry/Rectangle.java
@@ -20,4 +20,18 @@
 
     boolean contains(double x, double y);
 
+    double x1d();

+    double y1d();

+    double x2d();

+    double y2d();

+    double intersectionAreaD(Rectangle r);

+    double perimeterD();

+    double areaD();

 }
\ No newline at end of file
diff -r -u ./RegMiner4APR-Regression-Bugs/WORKING/src/main/java/com/github/davidmoten/rtree/RTree.java ./RegMiner4APR-Regression-Bugs/BIC/src/main/java/com/github/davidmoten/rtree/RTree.java
--- ./RegMiner4APR-Regression-Bugs/WORKING/src/main/java/com/github/davidmoten/rtree/RTree.java
+++ ./RegMiner4APR-Regression-Bugs/BIC/src/main/java/com/github/davidmoten/rtree/RTree.java
@@ -13,8 +13,8 @@
 import com.github.davidmoten.guavamini.Optional;
 import com.github.davidmoten.guavamini.annotations.VisibleForTesting;
 import com.github.davidmoten.rtree.geometry.Circle;
-import com.github.davidmoten.rtree.geometry.HasGeometry;
 import com.github.davidmoten.rtree.geometry.Geometry;
+import com.github.davidmoten.rtree.geometry.HasGeometry;
 import com.github.davidmoten.rtree.geometry.Intersects;
 import com.github.davidmoten.rtree.geometry.Line;
 import com.github.davidmoten.rtree.geometry.Point;
@@ -72,7 +72,7 @@
     }
 
     private RTree() {
-        this(Optional.<Node<T, S>> absent(), 0, null);
+        this(Optional.<Node<T, S>>absent(), 0, null);
     }
 
     /**
@@ -328,20 +327,22 @@
         public <T, S extends Geometry> RTree<T, S> create() {
             setDefaultCapacity();
 
-            return new RTree<T, S>(Optional.<Node<T, S>> absent(), 0,
+            return new RTree<T, S>(Optional.<Node<T, S>>absent(), 0,
                     new Context<T, S>(minChildren.get(), maxChildren.get(), selector, splitter,
                             (Factory<T, S>) factory));
         }
 
@@ -365,8 +366,7 @@
 
         @SuppressWarnings("unchecked")
         private <T, S extends Geometry> RTree<T, S> packingSTR(List<? extends HasGeometry> objects,
-                                                               boolean isLeaf, int size,
-                                                               Context<T, S> context) {
+                boolean isLeaf, int size, Context<T, S> context) {
             int capacity = (int) Math.round(maxChildren.get() * loadingFactor);
             int nodeCount = (int) Math.ceil(1.0 * objects.size() / capacity);
 
@@ -385,23 +385,24 @@
             int nodePerSlice = (int) Math.ceil(Math.sqrt(nodeCount));
             int sliceCapacity = nodePerSlice * capacity;
             int sliceCount = (int) Math.ceil(1.0 * objects.size() / sliceCapacity);
-            Collections.sort(objects, new MidComparator((short)0));
+            Collections.sort(objects, new MidComparator((short) 0));
 
             List<Node<T, S>> nodes = new ArrayList<Node<T, S>>(nodeCount);
             for (int s = 0; s < sliceCount; s++) {
                 @SuppressWarnings("rawtypes")
-                List slice = objects.subList(s * sliceCapacity, Math.min((s + 1) * sliceCapacity, objects.size()));
-                Collections.sort(slice, new MidComparator((short)1));
+                List slice = objects.subList(s * sliceCapacity,
+                        Math.min((s + 1) * sliceCapacity, objects.size()));
+                Collections.sort(slice, new MidComparator((short) 1));
 
                 for (int i = 0; i < slice.size(); i += capacity) {
                     if (isLeaf) {
-                        List<Entry<T, S>> entries =
-                                slice.subList(i, Math.min(slice.size(), i + capacity));
+                        List<Entry<T, S>> entries = slice.subList(i,
+                                Math.min(slice.size(), i + capacity));
                         Node<T, S> leaf = context.factory().createLeaf(entries, context);
                         nodes.add(leaf);
                     } else {
-                        List<Node<T, S>> children =
-                                slice.subList(i, Math.min(slice.size(), i + capacity));
+                        List<Node<T, S>> children = slice.subList(i,
+                                Math.min(slice.size(), i + capacity));
                         Node<T, S> nonleaf = context.factory().createNonLeaf(children, context);
                         nodes.add(nonleaf);
                     }
@@ -419,13 +421,15 @@
 
             @Override
             public int compare(HasGeometry o1, HasGeometry o2) {
-                return Float.compare(mid(o1), mid(o2));
+                return Double.compare(mid(o1), mid(o2));
             }
 
-            private float mid(HasGeometry o) {
+            private double mid(HasGeometry o) {
                 Rectangle mbr = o.geometry().mbr();
-                if (dimension == 0) return (mbr.x1() + mbr.x2()) / 2;
-                else return (mbr.y1() + mbr.y2()) / 2;
+                if (dimension == 0)
+                    return (mbr.x1d() + mbr.x2d()) / 2;
+                else
+                    return (mbr.y1d() + mbr.y2d()) / 2;
             }
         }
 
@@ -832,7 +828,7 @@
     public Observable<Entry<T, S>> nearest(final Rectangle r, final double maxDistance,
             int maxCount) {
         return search(r, maxDistance).lift(new OperatorBoundedPriorityQueue<Entry<T, S>>(maxCount,
-                Comparators.<T, S> ascendingDistance(r)));
+                Comparators.<T, S>ascendingDistance(r)));
     }
 
     /**
@@ -895,7 +891,7 @@
     }
 
     private Rectangle calculateMaxView(RTree<T, S> tree) {
-        return tree.entries().reduce(Optional.<Rectangle> absent(),
+        return tree.entries().reduce(Optional.<Rectangle>absent(),
                 new Func2<Optional<Rectangle>, Entry<T, S>, Optional<Rectangle>>() {
 
                     @Override
