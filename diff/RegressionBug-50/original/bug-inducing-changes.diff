diff -r -u ./RegMiner4APR-Regression-Bugs/WORKING/RELEASE-NOTES.txt ./RegMiner4APR-Regression-Bugs/BIC/RELEASE-NOTES.txt
--- ./RegMiner4APR-Regression-Bugs/WORKING/RELEASE-NOTES.txt	2024-09-15 23:49:28.064107003 +1000
+++ ./RegMiner4APR-Regression-Bugs/BIC/RELEASE-NOTES.txt	2024-09-15 23:49:28.024106619 +1000
@@ -70,6 +70,8 @@
 ==================
 
 * JEXL-290:      Safe navigation fails on chained method calls
+* JEXL-289:      Passing undeclared function parameter can overwrite a local function variable
+* JEXL-287:      Wrong resolution of local variables
 * JEXL-286:      For statement without a body should update its variable
 * JEXL-285:      For statement variable may seem unaffected by iteration
 * JEXL-282:      Pragmas with antish names are broken
diff -r -u ./RegMiner4APR-Regression-Bugs/WORKING/src/main/java/org/apache/commons/jexl3/internal/InterpreterBase.java ./RegMiner4APR-Regression-Bugs/BIC/src/main/java/org/apache/commons/jexl3/internal/InterpreterBase.java
--- ./RegMiner4APR-Regression-Bugs/WORKING/src/main/java/org/apache/commons/jexl3/internal/InterpreterBase.java	2024-09-15 23:49:28.064107003 +1000
+++ ./RegMiner4APR-Regression-Bugs/BIC/src/main/java/org/apache/commons/jexl3/internal/InterpreterBase.java	2024-09-15 23:49:28.024106619 +1000
@@ -99,7 +99,7 @@
         }
         AUTOCLOSEABLE = c;
     }
-
+    
     /**
      * Attempt to call close() if supported.
      * <p>This is used when dealing with auto-closeable (duck-like) objects
@@ -119,7 +119,21 @@
             //}
         }
     }
-
+              
+    /**
+     * Gets a value of a defined local variable or from the context.
+     * @param frame the local frame
+     * @param node the variable node
+     * @return the value
+     */
+    protected Object getVariable(Scope.Frame frame, ASTIdentifier node) {
+        int symbol = node.getSymbol();
+        if (frame.has(symbol)) {
+            return frame.get(symbol);
+        }
+        return context.get(node.getName());
+    }
+    
     /**
      * Whether this interpreter is currently evaluating with a strict engine flag.
      * @return true if strict engine, false otherwise
diff -r -u ./RegMiner4APR-Regression-Bugs/WORKING/src/main/java/org/apache/commons/jexl3/internal/Interpreter.java ./RegMiner4APR-Regression-Bugs/BIC/src/main/java/org/apache/commons/jexl3/internal/Interpreter.java
--- ./RegMiner4APR-Regression-Bugs/WORKING/src/main/java/org/apache/commons/jexl3/internal/Interpreter.java	2024-09-15 23:49:28.064107003 +1000
+++ ./RegMiner4APR-Regression-Bugs/BIC/src/main/java/org/apache/commons/jexl3/internal/Interpreter.java	2024-09-15 23:49:28.024106619 +1000
@@ -981,23 +981,34 @@
     }
 
     @Override
-    protected Object visit(ASTVar node, Object data) {
-        return visit((ASTIdentifier) node, data);
-    }
-
-    @Override
     protected Object visit(ASTReferenceExpression node, Object data) {
         return node.jjtGetChild(0).jjtAccept(this, data);
     }
 
     @Override
+    protected Object visit(ASTVar node, Object data) {
+        int symbol = node.getSymbol();
+        if (frame.has(symbol)) {
+            return frame.get(symbol);
+        } else {
+            frame.set(symbol, null);
+            return null;
+        }
+    }
+    
+    @Override
     protected Object visit(ASTIdentifier node, Object data) {
         cancelCheck(node);
         String name = node.getName();
         if (data == null) {
             int symbol = node.getSymbol();
             if (symbol >= 0) {
-                return frame.get(symbol);
+                if (frame.has(symbol)) {
+                    return frame.get(symbol);
+                } else if (node instanceof ASTVar) {
+                    // empty declaration
+                    return null;
+                }
             }
             Object value = context.get(name);
             if (value == null
@@ -1276,7 +1287,7 @@
                 // check we are not assigning a symbol itself
                 if (last < 0) {
                     if (assignop != null) {
-                        Object self = frame.get(symbol);
+                        Object self = getVariable(frame, var);
                         right = operators.tryAssignOverload(node, assignop, self, right);
                         if (right == JexlOperator.ASSIGN) {
                             return self;
@@ -1289,7 +1300,7 @@
                     }
                     return right; // 1
                 }
-                object = frame.get(symbol);
+                object = getVariable(frame, var);
                 // top level is a symbol, can not be an antish var
                 antish = false;
             } else {
@@ -1512,7 +1523,7 @@
             functor = null;
             // is it a global or local variable ?
             if (target == context) {
-                if (symbol >= 0) {
+                if (symbol >= 0 && frame.has(symbol)) {
                     functor = frame.get(symbol);
                     isavar = functor != null;
                 } else if (context.has(methodName)) {
diff -r -u ./RegMiner4APR-Regression-Bugs/WORKING/src/main/java/org/apache/commons/jexl3/internal/Scope.java ./RegMiner4APR-Regression-Bugs/BIC/src/main/java/org/apache/commons/jexl3/internal/Scope.java
--- ./RegMiner4APR-Regression-Bugs/WORKING/src/main/java/org/apache/commons/jexl3/internal/Scope.java	2024-09-15 23:49:28.064107003 +1000
+++ ./RegMiner4APR-Regression-Bugs/BIC/src/main/java/org/apache/commons/jexl3/internal/Scope.java	2024-09-15 23:49:28.024106619 +1000
@@ -19,12 +19,22 @@
 import java.util.Arrays;
 import java.util.LinkedHashMap;
 import java.util.Map;
+import org.apache.commons.jexl3.JexlContext;
+import org.apache.commons.jexl3.parser.ASTIdentifier;
 
 /**
  * A script scope, stores the declaration of parameters and local variables as symbols.
  * @since 3.0
  */
-public final class Scope {
+public final class Scope {    
+    /**
+     * The value of a declared but undefined variable, for instance: var x;.
+     */
+    private static final Object UNDEFINED = new Object() {
+        @Override public String toString() {
+            return "?";
+        }
+    };
     /**
      * The parent scope.
      */
@@ -199,6 +209,7 @@
     public Frame createFrame(Frame frame) {
         if (namedVariables != null) {
             Object[] arguments = new Object[namedVariables.size()];
+            Arrays.fill(arguments, UNDEFINED);
             if (frame != null && hoistedVariables != null && parent != null) {
                 for (Map.Entry<Integer, Integer> hoist : hoistedVariables.entrySet()) {
                     Integer target = hoist.getKey();
@@ -361,7 +372,16 @@
         public Object get(int s) {
             return stack[s];
         }
-
+        
+        /**
+         * Whether this frame defines a symbol, ie declared it and assigned it a value.
+         * @param s the offset in this frame
+         * @return true if this symbol has been assigned a value, false otherwise
+         */
+        public boolean has(int s) {
+            return s >= 0 && s < stack.length && stack[s] != UNDEFINED;
+        }
+            
         /**
          * Sets a value.
          * @param r the offset in this frame
@@ -378,8 +398,9 @@
          */
         public Frame assign(Object... values) {
             if (stack != null && values != null && values.length > 0) {
+                int nparm = scope.getArgCount();
                 Object[] copy = stack.clone();
-                int ncopy = Math.min(copy.length - curried, values.length);
+                int ncopy = Math.min(nparm - curried, Math.min(nparm, values.length));
                 System.arraycopy(values, 0, copy, curried, ncopy);
                 return new Frame(scope, copy, curried + ncopy);
             }
diff -r -u ./RegMiner4APR-Regression-Bugs/WORKING/src/site/xdoc/changes.xml ./RegMiner4APR-Regression-Bugs/BIC/src/site/xdoc/changes.xml
--- ./RegMiner4APR-Regression-Bugs/WORKING/src/site/xdoc/changes.xml	2024-09-15 23:49:28.068107042 +1000
+++ ./RegMiner4APR-Regression-Bugs/BIC/src/site/xdoc/changes.xml	2024-09-15 23:49:28.028106658 +1000
@@ -29,6 +29,12 @@
             <action dev="henrib" type="fix" issue="JEXL-290"> 
                 Safe navigation fails on chained method calls
             </action>
+            <action dev="henrib" type="fix" issue="JEXL-289" due-to="Dmitri Blinov">
+                Passing undeclared function parameter can overwrite a local function variable
+            </action>
+            <action dev="henrib" type="fix" issue="JEXL-287" due-to="Dmitri Blinov">
+                Wrong resolution of local variables
+            </action>
             <action dev="henrib" type="fix" issue="JEXL-286" due-to="Dmitri Blinov"> 
                 For statement without a body should update its variable
             </action>
diff -r -u ./RegMiner4APR-Regression-Bugs/WORKING/src/test/java/org/apache/commons/jexl3/Issues200Test.java ./RegMiner4APR-Regression-Bugs/BIC/src/test/java/org/apache/commons/jexl3/Issues200Test.java
--- ./RegMiner4APR-Regression-Bugs/WORKING/src/test/java/org/apache/commons/jexl3/Issues200Test.java	2024-09-15 23:49:28.068107042 +1000
+++ ./RegMiner4APR-Regression-Bugs/BIC/src/test/java/org/apache/commons/jexl3/Issues200Test.java	2024-09-15 23:49:28.028106658 +1000
@@ -801,7 +801,44 @@
         JexlEngine jexl = new JexlBuilder().strict(true).create();
         Assert.assertEquals(2, jexl.createScript(s286).execute(null));
     }
-        
+    
+    @Test
+    public void test287() {
+        JexlContext ctxt = new MapContext();
+        JexlEngine jexl = new JexlBuilder().strict(true).create();
+        String src;
+        JexlScript script;
+        Object result;
+        // declared, not defined
+        src = "x = 1; if (false) var x = 2; x";
+        script = jexl.createScript(src);
+        result = script.execute(ctxt);
+        Assert.assertEquals(1, result);
+        // declared and defined
+        src = "x = 1; if (true) var x = 2; x";
+        script = jexl.createScript(src);
+        result = script.execute(ctxt);
+        Assert.assertEquals(2,result);
+        // definition using shadowed global
+        src = "x = 1; var x = x + 41; x";
+        script = jexl.createScript(src);
+        result = script.execute(ctxt);
+        Assert.assertEquals(42,result);
+    }
+            
+    @Test
+    public void test289() {
+        JexlContext ctxt = new MapContext();
+        JexlEngine jexl = new JexlBuilder().strict(true).create();
+        String src;
+        JexlScript script;
+        Object result;
+        src = "var x = function(a) { var b; return b}; x(1,2)";
+        script = jexl.createScript(src);
+        result = script.execute(ctxt);
+        Assert.assertNull(result);
+    }
+    
     @Test
     public void test290a() throws Exception {
         Object result;
