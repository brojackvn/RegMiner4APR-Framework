diff -r -u ./RegMiner4APR-Regression-Bugs/WORKING/src/main/java/com/univocity/parsers/annotations/helpers/AnnotationHelper.java ./RegMiner4APR-Regression-Bugs/BIC/src/main/java/com/univocity/parsers/annotations/helpers/AnnotationHelper.java
--- ./RegMiner4APR-Regression-Bugs/WORKING/src/main/java/com/univocity/parsers/annotations/helpers/AnnotationHelper.java
+++ ./RegMiner4APR-Regression-Bugs/BIC/src/main/java/com/univocity/parsers/annotations/helpers/AnnotationHelper.java
@@ -432,7 +432,12 @@
 
 	private static boolean allFieldsIndexOrNameBased(boolean searchName, Class<?> beanClass) {
 		boolean hasAnnotation = false;
-		for (Field field : getAllFields(beanClass).keySet()) {

+		for (TransformedHeader header : getFieldSequence(beanClass, true, null)) {
+			if (header == null || header.getField() == null) {
+				continue;
+			}
+			Field field = header.getField();
 			Parsed annotation = findAnnotation(field, Parsed.class);
 			if (annotation != null) {
 				hasAnnotation = true;
@@ -477,18 +482,19 @@
 	 */
 	public static Integer[] getSelectedIndexes(Class<?> beanClass) {
 		List<Integer> indexes = new ArrayList<Integer>();
-		for (Field field : getAllFields(beanClass).keySet()) {
-			Parsed annotation = findAnnotation(field, Parsed.class);
-			if (annotation != null) {
-				if (annotation.index() != -1) {
-					if (indexes.contains(annotation.index())) {
-						throw new IllegalArgumentException("Duplicate field index '" + annotation.index() + "' found in attribute '" + field.getName() + "' of class " + beanClass.getName());
-					}
-					indexes.add(annotation.index());
+		for (TransformedHeader header : getFieldSequence(beanClass, true, null)) {
+			if(header == null){
+				continue;
+			}
+			int index = header.getHeaderIndex();
+
+			if (index != -1) {
+				if (indexes.contains(index)) {
+					throw new IllegalArgumentException("Duplicate field index '" + index + "' found in attribute '" + header.getAttributeName() + "' of class " + beanClass.getName());
 				}
+				indexes.add(index);
 			}
 		}
 		return indexes.toArray(new Integer[indexes.size()]);
 	}
 
diff -r -u ./RegMiner4APR-Regression-Bugs/WORKING/src/main/java/com/univocity/parsers/annotations/helpers/TransformedHeader.java ./RegMiner4APR-Regression-Bugs/BIC/src/main/java/com/univocity/parsers/annotations/helpers/TransformedHeader.java
--- ./RegMiner4APR-Regression-Bugs/WORKING/src/main/java/com/univocity/parsers/annotations/helpers/TransformedHeader.java
+++ ./RegMiner4APR-Regression-Bugs/BIC/src/main/java/com/univocity/parsers/annotations/helpers/TransformedHeader.java
@@ -4,6 +4,8 @@
 
 import java.lang.reflect.*;
 
+import static com.univocity.parsers.annotations.helpers.AnnotationHelper.*;

 /**
  * A pair associating a Field of an annotated class to an optional {@likn HeaderTransformer} obtained from
  * {@link Nested#headerTransformer()} when nested classes are used to process beans.
@@ -49,11 +51,30 @@
	 *
	 * @return the current header index.
	 */
+	public int getHeaderIndex() {
+		Parsed annotation = findAnnotation(field, Parsed.class);
+		if (annotation != null) {
+			int index = annotation.index();
+			if (index != -1) {
+				if (transformer != null) {
+					return transformer.transformIndex(field, index);
+				}
+				return index;
+			}
+		}
+		return -1;
+	}

	/**
 	 * Returns the original attribute name of the field in its containing class.
 	 *
 	 * @return the original attribute name of the field
 	 */
-	public String attributeName() {
+	public String getAttributeName() {
 		if (field == null) {
 			return null;
 		}