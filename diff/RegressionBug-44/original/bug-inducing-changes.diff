diff -r -u ./RegMiner4APR-Regression-Bugs/WORKING/src/main/java/com/alibaba/fastjson/parser/deserializer/ASMDeserializerFactory.java ./RegMiner4APR-Regression-Bugs/BIC/src/main/java/com/alibaba/fastjson/parser/deserializer/ASMDeserializerFactory.java
--- ./RegMiner4APR-Regression-Bugs/WORKING/src/main/java/com/alibaba/fastjson/parser/deserializer/ASMDeserializerFactory.java	2024-09-13 17:05:41.691343416 +1000
+++ ./RegMiner4APR-Regression-Bugs/BIC/src/main/java/com/alibaba/fastjson/parser/deserializer/ASMDeserializerFactory.java	2024-09-13 17:05:41.575342272 +1000
@@ -338,6 +338,13 @@
 
                 _deserObject(context, mw, fieldInfo, fieldClass, i);
 
+                mw.visitVarInsn(ALOAD, context.var("lexer"));
+                mw.visitMethodInsn(INVOKEVIRTUAL, JSONLexerBase, "token", "()I");
+                mw.visitLdcInsn(JSONToken.RBRACKET);
+                mw.visitJumpInsn(IF_ICMPEQ, objEndIf_);
+//                mw.visitInsn(POP);
+//                mw.visitInsn(POP);
+
                 mw.visitVarInsn(ALOAD, 0);
                 mw.visitVarInsn(ALOAD, context.var("lexer"));
                 if (!last) {
diff -r -u ./RegMiner4APR-Regression-Bugs/WORKING/src/main/java/com/alibaba/fastjson/parser/deserializer/JavaBeanDeserializer.java ./RegMiner4APR-Regression-Bugs/BIC/src/main/java/com/alibaba/fastjson/parser/deserializer/JavaBeanDeserializer.java
--- ./RegMiner4APR-Regression-Bugs/WORKING/src/main/java/com/alibaba/fastjson/parser/deserializer/JavaBeanDeserializer.java	2024-09-13 17:05:41.691343416 +1000
+++ ./RegMiner4APR-Regression-Bugs/BIC/src/main/java/com/alibaba/fastjson/parser/deserializer/JavaBeanDeserializer.java	2024-09-13 17:05:41.575342272 +1000
@@ -327,6 +327,10 @@
                 Object value = parser.parseObject(fieldDeser.fieldInfo.fieldType, fieldDeser.fieldInfo.name);
                 fieldDeser.setValue(object, value);
 
+                if (lexer.token() == JSONToken.RBRACKET) {
+                    break;
+                }
+
                 check(lexer, seperator == ']' ? JSONToken.RBRACKET : JSONToken.COMMA);
                 // parser.accept(seperator == ']' ? JSONToken.RBRACKET : JSONToken.COMMA);
             }
diff -r -u ./RegMiner4APR-Regression-Bugs/WORKING/src/main/java/com/alibaba/fastjson/parser/JSONLexerBase.java ./RegMiner4APR-Regression-Bugs/BIC/src/main/java/com/alibaba/fastjson/parser/JSONLexerBase.java
--- ./RegMiner4APR-Regression-Bugs/WORKING/src/main/java/com/alibaba/fastjson/parser/JSONLexerBase.java	2024-09-13 17:05:41.687343377 +1000
+++ ./RegMiner4APR-Regression-Bugs/BIC/src/main/java/com/alibaba/fastjson/parser/JSONLexerBase.java	2024-09-13 17:05:41.575342272 +1000
@@ -2295,23 +2295,41 @@
         int offset = fieldName.length;
         char chLocal = charAt(bp + (offset++));
 
+        final boolean quote = chLocal == '"';
+        if (quote) {
+            chLocal = charAt(bp + (offset++));
+        }
+
+        boolean negative = chLocal == '-';
+        if (negative) {
+            chLocal = charAt(bp + (offset++));
+        }
+
         float value;
         if (chLocal >= '0' && chLocal <= '9') {
+            int intVal = chLocal - '0';
             for (;;) {
                 chLocal = charAt(bp + (offset++));
                 if (chLocal >= '0' && chLocal <= '9') {
+                    intVal = intVal * 10 + (chLocal - '0');
                     continue;
                 } else {
                     break;
                 }
             }
 
-            if (chLocal == '.') {
+            int power = 1;
+            boolean small = (chLocal == '.');
+            if (small) {
                 chLocal = charAt(bp + (offset++));
                 if (chLocal >= '0' && chLocal <= '9') {
+                    intVal = intVal * 10 + (chLocal - '0');
+                    power *= 10;
                     for (;;) {
                         chLocal = charAt(bp + (offset++));
                         if (chLocal >= '0' && chLocal <= '9') {
+                            intVal = intVal * 10 + (chLocal - '0');
+                            power *= 10;
                             continue;
                         } else {
                             break;
@@ -2323,10 +2341,45 @@
                 }
             }
 
-            int start = bp + fieldName.length;
-            int count = bp + offset - start - 1;
-            String text = this.subString(start, count);
-            value = Float.parseFloat(text);
+            boolean exp = chLocal == 'e' || chLocal == 'E';
+            if (exp) {
+                chLocal = charAt(bp + (offset++));
+                if (chLocal == '+' || chLocal == '-') {
+                    chLocal = charAt(bp + (offset++));
+                }
+                for (;;) {
+                    if (chLocal >= '0' && chLocal <= '9') {
+                        chLocal = charAt(bp + (offset++));
+                    } else {
+                        break;
+                    }
+                }
+            }
+
+            int start, count;
+            if (quote) {
+                if (chLocal != '"') {
+                    matchStat = NOT_MATCH;
+                    return 0;
+                } else {
+                    chLocal = charAt(bp + (offset++));
+                }
+                start = bp + fieldName.length + 1;
+                count = bp + offset - start - 2;
+            } else {
+                start = bp + fieldName.length;
+                count = bp + offset - start - 1;
+            }
+
+            if (!exp && count < 20) {
+                value = ((float) intVal) / power;
+                if (negative) {
+                    value = -value;
+                }
+            } else {
+                String text = this.subString(start, count);
+                value = Float.parseFloat(text);
+            }
         } else {
             matchStat = NOT_MATCH;
             return 0;
@@ -2381,23 +2434,37 @@
             chLocal = charAt(bp + (offset++));
         }
 
+        boolean negative = chLocal == '-';
+        if (negative) {
+            chLocal = charAt(bp + (offset++));
+        }
+
         float value;
         if (chLocal >= '0' && chLocal <= '9') {
+            int intVal = chLocal - '0';
+
             for (;;) {
                 chLocal = charAt(bp + (offset++));
                 if (chLocal >= '0' && chLocal <= '9') {
+                    intVal = intVal * 10 + (chLocal - '0');
                     continue;
                 } else {
                     break;
                 }
             }
 
-            if (chLocal == '.') {
+            int power = 1;
+            boolean small = (chLocal == '.');
+            if (small) {
                 chLocal = charAt(bp + (offset++));
                 if (chLocal >= '0' && chLocal <= '9') {
+                    intVal = intVal * 10 + (chLocal - '0');
+                    power *= 10;
                     for (;;) {
                         chLocal = charAt(bp + (offset++));
                         if (chLocal >= '0' && chLocal <= '9') {
+                            intVal = intVal * 10 + (chLocal - '0');
+                            power *= 10;
                             continue;
                         } else {
                             break;
@@ -2409,6 +2476,22 @@
                 }
             }
 
+            boolean exp = chLocal == 'e' || chLocal == 'E';
+            if (exp) {
+                chLocal = charAt(bp + (offset++));
+                if (chLocal == '+' || chLocal == '-') {
+                    chLocal = charAt(bp + (offset++));
+                }
+                for (;;) {
+                    if (chLocal >= '0' && chLocal <= '9') {
+                        chLocal = charAt(bp + (offset++));
+                    } else {
+                        break;
+                    }
+                }
+            }
+
+
             int start, count;
             if (quote) {
                 if (chLocal != '"') {
@@ -2423,8 +2506,16 @@
                 start = bp;
                 count = bp + offset - start - 1;
             }
-            String text = this.subString(start, count);
-            value = Float.parseFloat(text);
+
+            if (!exp && count < 20) {
+                value = ((float) intVal) / power;
+                if (negative) {
+                    value = -value;
+                }
+            } else {
+                String text = this.subString(start, count);
+                value = Float.parseFloat(text);
+            }
         } else {
             matchStat = NOT_MATCH;
             return 0;
@@ -2452,23 +2543,36 @@
             chLocal = charAt(bp + (offset++));
         }
 
+        boolean negative = chLocal == '-';
+        if (negative) {
+            chLocal = charAt(bp + (offset++));
+        }
+
         double value;
         if (chLocal >= '0' && chLocal <= '9') {
+            long intVal = chLocal - '0';
             for (;;) {
                 chLocal = charAt(bp + (offset++));
                 if (chLocal >= '0' && chLocal <= '9') {
+                    intVal = intVal * 10 + (chLocal - '0');
                     continue;
                 } else {
                     break;
                 }
             }
 
-            if (chLocal == '.') {
+            long power = 1;
+            boolean small = (chLocal == '.');
+            if (small) {
                 chLocal = charAt(bp + (offset++));
                 if (chLocal >= '0' && chLocal <= '9') {
+                    intVal = intVal * 10 + (chLocal - '0');
+                    power *= 10;
                     for (;;) {
                         chLocal = charAt(bp + (offset++));
                         if (chLocal >= '0' && chLocal <= '9') {
+                            intVal = intVal * 10 + (chLocal - '0');
+                            power *= 10;
                             continue;
                         } else {
                             break;
@@ -2480,6 +2584,21 @@
                 }
             }
 
+            boolean exp = chLocal == 'e' || chLocal == 'E';
+            if (exp) {
+                chLocal = charAt(bp + (offset++));
+                if (chLocal == '+' || chLocal == '-') {
+                    chLocal = charAt(bp + (offset++));
+                }
+                for (;;) {
+                    if (chLocal >= '0' && chLocal <= '9') {
+                        chLocal = charAt(bp + (offset++));
+                    } else {
+                        break;
+                    }
+                }
+            }
+
             int start, count;
             if (quote) {
                 if (chLocal != '"') {
@@ -2494,8 +2613,16 @@
                 start = bp;
                 count = bp + offset - start - 1;
             }
-            String text = this.subString(start, count);
-            value = Double.parseDouble(text);
+
+            if (!exp && count < 20) {
+                value = ((double) intVal) / power;
+                if (negative) {
+                    value = -value;
+                }
+            } else {
+                String text = this.subString(start, count);
+                value = Double.parseDouble(text);
+            }
         } else {
             matchStat = NOT_MATCH;
             return 0;
@@ -2865,24 +2992,42 @@
 
         int offset = fieldName.length;
         char chLocal = charAt(bp + (offset++));
+        final boolean quote = chLocal == '"';
+        if (quote) {
+            chLocal = charAt(bp + (offset++));
+        }
+
+        boolean negative = chLocal == '-';
+        if (negative) {
+            chLocal = charAt(bp + (offset++));
+        }
 
         double value;
         if (chLocal >= '0' && chLocal <= '9') {
+            long intVal = chLocal - '0';
+
             for (;;) {
                 chLocal = charAt(bp + (offset++));
                 if (chLocal >= '0' && chLocal <= '9') {
+                    intVal = intVal * 10 + (chLocal - '0');
                     continue;
                 } else {
                     break;
                 }
             }
 
-            if (chLocal == '.') {
+            long power = 1;
+            boolean small = (chLocal == '.');
+            if (small) {
                 chLocal = charAt(bp + (offset++));
                 if (chLocal >= '0' && chLocal <= '9') {
+                    intVal = intVal * 10 + (chLocal - '0');
+                    power *= 10;
                     for (;;) {
                         chLocal = charAt(bp + (offset++));
                         if (chLocal >= '0' && chLocal <= '9') {
+                            intVal = intVal * 10 + (chLocal - '0');
+                            power *= 10;
                             continue;
                         } else {
                             break;
@@ -2894,7 +3039,8 @@
                 }
             }
 
-            if (chLocal == 'e' || chLocal == 'E') {
+            boolean exp = chLocal == 'e' || chLocal == 'E';
+            if (exp) {
                 chLocal = charAt(bp + (offset++));
                 if (chLocal == '+' || chLocal == '-') {
                     chLocal = charAt(bp + (offset++));
@@ -2908,10 +3054,30 @@
                 }
             }
 
-            int start = bp + fieldName.length;
-            int count = bp + offset - start - 1;
-            String text = this.subString(start, count);
-            value = Double.parseDouble(text);
+            int start, count;
+            if (quote) {
+                if (chLocal != '"') {
+                    matchStat = NOT_MATCH;
+                    return 0;
+                } else {
+                    chLocal = charAt(bp + (offset++));
+                }
+                start = bp + fieldName.length + 1;
+                count = bp + offset - start - 2;
+            } else {
+                start = bp + fieldName.length;
+                count = bp + offset - start - 1;
+            }
+
+            if (!exp && count < 20) {
+                value = ((double) intVal) / power;
+                if (negative) {
+                    value = -value;
+                }
+            } else {
+                String text = this.subString(start, count);
+                value = Double.parseDouble(text);
+            }
         } else {
             matchStat = NOT_MATCH;
             return 0;
Only in ./RegMiner4APR-Regression-Bugs/BIC/src/test/java/com/alibaba/json/bvt/basicType: DoubleTest.java
Only in ./RegMiner4APR-Regression-Bugs/BIC/src/test/java/com/alibaba/json/bvt/basicType: FloatTest.java
diff -r -u ./RegMiner4APR-Regression-Bugs/WORKING/src/test/java/com/alibaba/json/bvt/IncomingDataPointTest.java ./RegMiner4APR-Regression-Bugs/BIC/src/test/java/com/alibaba/json/bvt/IncomingDataPointTest.java
--- ./RegMiner4APR-Regression-Bugs/WORKING/src/test/java/com/alibaba/json/bvt/IncomingDataPointTest.java	2024-09-13 17:05:41.695343456 +1000
+++ ./RegMiner4APR-Regression-Bugs/BIC/src/test/java/com/alibaba/json/bvt/IncomingDataPointTest.java	2024-09-13 17:05:41.583342351 +1000
@@ -30,6 +30,10 @@
         System.out.println(json);
 
         JSON.parseArray(json, IncomingDataPoint.class);
+
+        IncomingDataPoint p2 = JSON.parseObject("[\"mem.usage.GB\",1501833776283,\"58.41\",{\"site\":\"et2\",\"appname\":\"histore\",\"ip\":\"1.1.1.1\"}]", IncomingDataPoint.class);
+        IncomingDataPoint p3 = JSON.parseObject("[\"mem.usage.GB\",1501833776283,\"58.41\",{\"site\":\"et2\",\"appname\":\"histore\",\"ip\":\"1.1.1.1\"},null]", IncomingDataPoint.class);
+        System.out.println(JSON.toJSONString(p2));
 //        JSON.parseObject(json, IncomingDataPoint[].class);
     }
     public void test_for_IncomingDataPoint() throws Exception {
diff -r -u ./RegMiner4APR-Regression-Bugs/WORKING/src/test/java/com/alibaba/json/bvtVO/IncomingDataPoint.java ./RegMiner4APR-Regression-Bugs/BIC/src/test/java/com/alibaba/json/bvtVO/IncomingDataPoint.java
--- ./RegMiner4APR-Regression-Bugs/WORKING/src/test/java/com/alibaba/json/bvtVO/IncomingDataPoint.java	2024-09-13 17:05:41.727343772 +1000
+++ ./RegMiner4APR-Regression-Bugs/BIC/src/test/java/com/alibaba/json/bvtVO/IncomingDataPoint.java	2024-09-13 17:05:41.615342667 +1000
@@ -14,7 +14,7 @@
 @JSONType(serialzeFeatures= SerializerFeature.BeanToArray,
         parseFeatures= Feature.SupportArrayToBean,
         orders = {"metric", "timestamp", "value", "tags", "tsuid", "granularity", "aggregator"},
-        asm = false
+        asm = true
         )
 public class IncomingDataPoint {
     /** The incoming metric name */
Only in ./RegMiner4APR-Regression-Bugs/BIC/src/test/java/com/alibaba/json/test/benchmark: basic
