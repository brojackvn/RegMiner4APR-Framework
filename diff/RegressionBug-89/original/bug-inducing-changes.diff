diff -r -u ./RegMiner4APR-Regression-Bugs/WORKING/java/src/com/google/template/soy/passes/HtmlRewritePass.java ./RegMiner4APR-Regression-Bugs/BIC/java/src/com/google/template/soy/passes/HtmlRewritePass.java
--- ./RegMiner4APR-Regression-Bugs/WORKING/java/src/com/google/template/soy/passes/HtmlRewritePass.java	2024-09-08 01:36:28.513909440 +1000
+++ ./RegMiner4APR-Regression-Bugs/BIC/java/src/com/google/template/soy/passes/HtmlRewritePass.java	2024-09-08 01:36:28.469909132 +1000
@@ -209,10 +209,14 @@
   private static final SoyErrorKind UNEXPECTED_WS_AFTER_LT =
       SoyErrorKind.of("Unexpected whitespace after ''<'', did you mean ''&lt;''?");
 
+  private static final SoyErrorKind UNEXPECTED_CLOSE_TAG =
+      SoyErrorKind.of("Unexpected close tag for context-changing tag.");
+
   /** Represents features of the parser states. */
   private enum StateFeature {
     /** Means the state is part of an html 'tag' of a node (but not, inside an attribute value). */
     TAG,
+    RCDATA,
     INVALID_END_STATE_FOR_BLOCK;
   }
 
@@ -225,10 +229,11 @@
   private enum State {
     NONE,
     PCDATA,
-    RCDATA_SCRIPT,
-    RCDATA_TEXTAREA,
-    RCDATA_TITLE,
-    RCDATA_STYLE,
+    RCDATA_SCRIPT(StateFeature.RCDATA),
+    RCDATA_TEXTAREA(StateFeature.RCDATA),
+    RCDATA_TITLE(StateFeature.RCDATA),
+    RCDATA_STYLE(StateFeature.RCDATA),
+    RCDATA_XMP(StateFeature.RCDATA),
     HTML_COMMENT,
     CDATA,
     /**
@@ -326,6 +331,7 @@
         case PCDATA:
         case RCDATA_STYLE:
         case RCDATA_TITLE:
+        case RCDATA_XMP:
         case RCDATA_SCRIPT:
         case RCDATA_TEXTAREA:
         case DOUBLE_QUOTED_ATTRIBUTE_VALUE:
@@ -355,6 +361,10 @@
       return stateTypes.contains(StateFeature.INVALID_END_STATE_FOR_BLOCK);
     }
 
+    boolean isRcDataState() {
+      return stateTypes.contains(StateFeature.RCDATA);
+    }
+
     @Override
     public String toString() {
       return Ascii.toLowerCase(name().replace('_', ' '));
@@ -643,6 +653,9 @@
           case RCDATA_TITLE:
             handleRcData(TagName.RcDataTagName.TITLE);
             break;
+          case RCDATA_XMP:
+            handleRcData(TagName.RcDataTagName.XMP);
+            break;
           case RCDATA_SCRIPT:
             handleRcData(TagName.RcDataTagName.SCRIPT);
             break;
@@ -736,6 +749,7 @@
         case RCDATA_STYLE:
         case RCDATA_TEXTAREA:
         case RCDATA_TITLE:
+        case RCDATA_XMP:
         case SINGLE_QUOTED_XML_ATTRIBUTE_VALUE:
         case XML_DECLARATION:
           // no op
@@ -747,15 +761,14 @@
     /**
      * Handle rcdata blocks (script, style, title, textarea).
      *
-     * <p>Scans for {@code </tagName} and if it finds it, enters {@link State#PCDATA}.
+     * <p>Scans for {@code </tagName} and if it finds it parses it as a close tag.
      */
     void handleRcData(TagName.RcDataTagName tagName) {
       boolean foundLt = advanceWhileMatches(NOT_LT);
       if (foundLt) {
         if (matchPrefixIgnoreCase("</" + tagName, false /* don't advance */)) {
-          // we don't advance.  instead we just switch to pcdata and since the current index is on
-          // a '<' character, this will cause us to parse a close tag, which is what we want
-          context.setState(State.PCDATA, currentPoint());
+          // pseudo re-enter pcdata so that we trigger the normal logic for starting a tag
+          handlePcData();
         } else {
           advance();
         }
@@ -1465,6 +1478,7 @@
         case RCDATA_STYLE:
         case RCDATA_TEXTAREA:
         case RCDATA_TITLE:
+        case RCDATA_XMP:
         case XML_DECLARATION:
         case CDATA:
         case DOUBLE_QUOTED_XML_ATTRIBUTE_VALUE:
@@ -1520,6 +1534,7 @@
         case RCDATA_STYLE:
         case RCDATA_TEXTAREA:
         case RCDATA_TITLE:
+        case RCDATA_XMP:
         case XML_DECLARATION:
         case CDATA:
         case DOUBLE_QUOTED_XML_ATTRIBUTE_VALUE:
@@ -1655,6 +1670,7 @@
         case RCDATA_STYLE:
         case RCDATA_TEXTAREA:
         case RCDATA_TITLE:
+        case RCDATA_XMP:
         case XML_DECLARATION:
         case CDATA:
         case DOUBLE_QUOTED_XML_ATTRIBUTE_VALUE:
@@ -1722,6 +1738,7 @@
           case RCDATA_STYLE:
           case RCDATA_TEXTAREA:
           case RCDATA_TITLE:
+          case RCDATA_XMP:
           case SINGLE_QUOTED_XML_ATTRIBUTE_VALUE:
           case XML_DECLARATION:
             context.reset();
@@ -1794,6 +1811,7 @@
         case RCDATA_STYLE:
         case RCDATA_TEXTAREA:
         case RCDATA_TITLE:
+        case RCDATA_XMP:
         case XML_DECLARATION:
         case CDATA:
         case DOUBLE_QUOTED_XML_ATTRIBUTE_VALUE:
@@ -1834,6 +1852,8 @@
           return didYouForgetToCloseThe("<textare> block");
         case RCDATA_TITLE:
           return didYouForgetToCloseThe("<title> block");
+        case RCDATA_XMP:
+          return didYouForgetToCloseThe("<xmp> block");
         case HTML_TAG_NAME: // kind of crazy
         case AFTER_ATTRIBUTE_NAME:
         case AFTER_TAG_NAME_OR_ATTRIBUTE:
@@ -2031,6 +2051,7 @@
     SourceLocation.Point tagStartPoint;
     RawTextNode tagStartNode;
     TagName tagName;
+    State tagStartState;
 
     // TODO(lukes): consider lazily allocating these lists.
     /** All the 'direct' children of the current tag. */
@@ -2149,6 +2170,9 @@
       if (tagStartNode != null) {
         error = format(error, "Expected tagStartNode to be null, got: %s", tagStartNode);
       }
+      if (tagStartState != null) {
+        error = format(error, "Expected tagStartState to be null, got: %s", tagStartState);
+      }
       if (quotedAttributeValueStart != null) {
         error =
             format(
@@ -2178,6 +2202,7 @@
       tagStartPoint = null;
       tagStartNode = null;
       tagName = null;
+      tagStartState = null;
       directTagChildren.clear();
       resetAttribute();
     }
@@ -2200,10 +2225,12 @@
     void startTag(RawTextNode tagStartNode, boolean isCloseTag, SourceLocation.Point point) {
       checkState(this.tagStartPoint == null);
       checkState(this.tagStartNode == null);
+      checkState(this.tagStartState == null);
       checkState(this.directTagChildren.isEmpty());
 
       // need to check if it is safe to transition into a tag.
-      // this is only true if our starting location is pcdata
+      // this is only true if our starting location is pcdata, this is how we prevent people from
+      // escaping kind=js blocks with a '</script'
       if (startingState != State.PCDATA) {
         errorReporter.report(
             point.asLocation(filePath),
@@ -2214,6 +2241,7 @@
         throw new AbortParsingBlockError();
       }
 
+      this.tagStartState = state;
       this.tagStartPoint = checkNotNull(point);
       this.tagStartNode = checkNotNull(tagStartNode);
       this.isCloseTag = isCloseTag;
@@ -2358,27 +2386,14 @@
         replacement = new HtmlOpenTagNode(nodeIdGen.genId(), tagName, sourceLocation, selfClosing);
       }
       // Depending on the tag name, we may need to enter a special state after the tag.
-      State nextState = State.PCDATA;
-      if (!selfClosing && !isCloseTag) {
-        TagName.RcDataTagName rcDataTag = tagName.getRcDataTagName();
-        if (rcDataTag != null) {
-          switch (rcDataTag) {
-            case SCRIPT:
-              nextState = State.RCDATA_SCRIPT;
-              break;
-            case STYLE:
-              nextState = State.RCDATA_STYLE;
-              break;
-            case TEXTAREA:
-              nextState = State.RCDATA_TEXTAREA;
-              break;
-            case TITLE:
-              nextState = State.RCDATA_TITLE;
-              break;
-            default:
-              throw new AssertionError(rcDataTag);
-          }
-        }
+      State nextState = getNextState(tagName);
+      // if we see a naked </script report an error
+      if (isCloseTag && nextState.isRcDataState() && tagStartState != nextState) {
+        errorReporter.report(tagStartLocation(), UNEXPECTED_CLOSE_TAG);
+      }
+      if (selfClosing || isCloseTag) {
+        // next state for close tags is always pcdata (special blocks don't recursively nest)
+        nextState = State.PCDATA;
       }
       edits.remove(tagEndNode);
       edits.addChild(replacement, tagName.getNode());
@@ -2388,11 +2403,32 @@
       directTagChildren.clear();
       tagStartPoint = null;
       tagName = null;
+      tagStartState = null;
       tagStartNode = null;
       checkEmpty("Expected state to be empty after completing a tag");
       return nextState;
     }
 
+    private static State getNextState(TagName tagName) {
+      if (tagName.getRcDataTagName() == null) {
+        return State.PCDATA;
+      }
+      switch (tagName.getRcDataTagName()) {
+        case SCRIPT:
+          return State.RCDATA_SCRIPT;
+        case STYLE:
+          return State.RCDATA_STYLE;
+        case TEXTAREA:
+          return State.RCDATA_TEXTAREA;
+        case TITLE:
+          return State.RCDATA_TITLE;
+        case XMP:
+          return State.RCDATA_XMP;
+        default:
+          throw new AssertionError(tagName.getRcDataTagName());
+      }
+    }
+
     void maybeFinishPendingAttribute(SourceLocation.Point currentPoint) {
       // For quoted attribute values we should have already finished them (when we saw the closing
       // quote).  But for unquoted attribute values we delay closing them until we see a delimiter
diff -r -u ./RegMiner4APR-Regression-Bugs/WORKING/java/src/com/google/template/soy/soytree/TagName.java ./RegMiner4APR-Regression-Bugs/BIC/java/src/com/google/template/soy/soytree/TagName.java
--- ./RegMiner4APR-Regression-Bugs/WORKING/java/src/com/google/template/soy/soytree/TagName.java	2024-09-08 01:36:28.517909468 +1000
+++ ./RegMiner4APR-Regression-Bugs/BIC/java/src/com/google/template/soy/soytree/TagName.java	2024-09-08 01:36:28.473909160 +1000
@@ -49,7 +49,8 @@
     SCRIPT,
     STYLE,
     TITLE,
-    TEXTAREA;
+    TEXTAREA,
+    XMP;
 
     @Override
     public String toString() {
@@ -110,6 +111,9 @@
       case "title":
         rcDataTagName = RcDataTagName.TITLE;
         break;
+      case "xmp":
+        rcDataTagName = RcDataTagName.XMP;
+        break;
       default:
         rcDataTagName = null;
         break;
diff -r -u ./RegMiner4APR-Regression-Bugs/WORKING/java/tests/com/google/template/soy/parsepasses/contextautoesc/ContentSecurityPolicyPassTest.java ./RegMiner4APR-Regression-Bugs/BIC/java/tests/com/google/template/soy/parsepasses/contextautoesc/ContentSecurityPolicyPassTest.java
--- ./RegMiner4APR-Regression-Bugs/WORKING/java/tests/com/google/template/soy/parsepasses/contextautoesc/ContentSecurityPolicyPassTest.java	2024-09-08 01:36:28.521909496 +1000
+++ ./RegMiner4APR-Regression-Bugs/BIC/java/tests/com/google/template/soy/parsepasses/contextautoesc/ContentSecurityPolicyPassTest.java	2024-09-08 01:36:28.477909188 +1000
@@ -105,7 +105,7 @@
             "{template .foo}\n",
             "<script src=\"one.js\"" + nonce() + "></script>",
             strictHtmlEnabled ? "" : "<script src=two.js" + nonce() + "></script>",
-            strictHtmlEnabled ? "" : "<script src=three.js " + nonce() + "/></script>",
+            strictHtmlEnabled ? "" : "<script src=three.js " + nonce() + "></script>",
             "<h1>Not a script</h1>",
             "<script type='text/javascript'" + nonce() + ">main()</script>\n",
             "{/template}"),
@@ -113,7 +113,7 @@
             "{template .foo}\n",
             "<script src=\"one.js\"></script>",
             strictHtmlEnabled ? "" : "<script src=two.js></script>",
-            strictHtmlEnabled ? "" : "<script src=three.js /></script>",
+            strictHtmlEnabled ? "" : "<script src=three.js ></script>",
             "<h1>Not a script</h1>",
             "<script type='text/javascript'>main()</script>\n",
             "{/template}"));
diff -r -u ./RegMiner4APR-Regression-Bugs/WORKING/java/tests/com/google/template/soy/passes/HtmlRewritePassTest.java ./RegMiner4APR-Regression-Bugs/BIC/java/tests/com/google/template/soy/passes/HtmlRewritePassTest.java
--- ./RegMiner4APR-Regression-Bugs/WORKING/java/tests/com/google/template/soy/passes/HtmlRewritePassTest.java	2024-09-08 01:36:28.521909496 +1000
+++ ./RegMiner4APR-Regression-Bugs/BIC/java/tests/com/google/template/soy/passes/HtmlRewritePassTest.java	2024-09-08 01:36:28.477909188 +1000
@@ -25,6 +25,7 @@
 import com.google.template.soy.base.internal.SoyFileKind;
 import com.google.template.soy.error.ErrorReporter;
 import com.google.template.soy.error.ExplodingErrorReporter;
+import com.google.template.soy.error.FormattingErrorReporter;
 import com.google.template.soy.soyparse.SoyFileParser;
 import com.google.template.soy.soytree.HtmlAttributeNode;
 import com.google.template.soy.soytree.HtmlAttributeValueNode;
@@ -371,6 +372,27 @@
     assertThatSourceString(node).isEqualTo("<div class={if $p}x{else}y{/if}>");
   }
 
+  @Test
+  public void testUnmatchedContextChangingCloseTagUnquotedAttributeValue() {
+    // matched script is fine
+    runPass("<script>xxx</script>");
+    // unmatched closing div is fine.
+    runPass("</div>");
+    for (String tag : new String[] {"</script>", "</style>", "</title>", "</textarea>", "</xmp>"}) {
+      FormattingErrorReporter errorReporter = new FormattingErrorReporter();
+      runPass(tag, errorReporter);
+      assertThat(errorReporter.getErrorMessages())
+          .named("error message for: %s", tag)
+          .containsExactly("Unexpected close tag for context-changing tag.");
+    }
+  }
+
+  // regression test for a bug where we would drop rcdata content.
+  @Test
+  public void testRcDataTags() {
+    assertThatSourceString(runPass("<script>xxx</script>")).isEqualTo("<script>xxx</script>");
+  }
+
   private static TemplateNode runPass(String input) {
     return runPass(input, ExplodingErrorReporter.get());
   }
diff -r -u ./RegMiner4APR-Regression-Bugs/WORKING/testdata/javascript/soy_usegoog_lib.js ./RegMiner4APR-Regression-Bugs/BIC/testdata/javascript/soy_usegoog_lib.js
--- ./RegMiner4APR-Regression-Bugs/WORKING/testdata/javascript/soy_usegoog_lib.js	2024-09-08 01:36:28.525909524 +1000
+++ ./RegMiner4APR-Regression-Bugs/BIC/testdata/javascript/soy_usegoog_lib.js	2024-09-08 01:36:28.481909216 +1000
@@ -691,7 +691,7 @@
  *     module otherwise null.
  */
 goog.require = function(name) {
-  // If the object already exists we do not need do do anything.
+  // If the object already exists we do not need to do anything.
   if (!COMPILED) {
     if (goog.ENABLE_DEBUG_LOADER && goog.IS_OLD_IE_) {
       goog.maybeProcessDeferredDep_(name);
@@ -13338,19 +13338,19 @@
  * is immutable; hence only a default instance corresponding to the empty string
  * can be obtained via constructor invocation.
  *
- * A SafeStyle's string representation ({@link #getTypedStringValue()}) can
- * safely:
+ * SafeStyle's string representation can safely be:
  * <ul>
- *   <li>Be interpolated as the entire content of a *quoted* HTML style
- *       attribute, or before already existing properties. The SafeStyle string
- *       *must be HTML-attribute-escaped* (where " and ' are escaped) before
+ *   <li>Interpolated as the content of a *quoted* HTML style attribute.
+ *       However, the SafeStyle string *must be HTML-attribute-escaped* before
  *       interpolation.
- *   <li>Be interpolated as the entire content of a {}-wrapped block within a
- *       stylesheet, or before already existing properties. The SafeStyle string
- *       should not be escaped before interpolation. SafeStyle's contract also
- *       guarantees that the string will not be able to introduce new properties
- *       or elide existing ones.
- *   <li>Be assigned to the style property of a DOM node. The SafeStyle string
+ *   <li>Interpolated as the content of a {}-wrapped block within a stylesheet.
+ *       '<' characters in the SafeStyle string *must be CSS-escaped* before
+ *       interpolation. The SafeStyle string is also guaranteed not to be able
+ *       to introduce new properties or elide existing ones.
+ *   <li>Interpolated as the content of a {}-wrapped block within an HTML
+ *       <style> element. '<' characters in the SafeStyle string
+ *       *must be CSS-escaped* before interpolation.
+ *   <li>Assigned to the style property of a DOM node. The SafeStyle string
  *       should not be escaped before being assigned to the property.
  * </ul>
  *
