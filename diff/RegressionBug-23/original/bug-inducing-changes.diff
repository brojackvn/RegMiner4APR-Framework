diff -r -u ./RegMiner4APR-Regression-Bugs/WORKING/src/org/stringtemplate/v4/compiler/Group.g ./RegMiner4APR-Regression-Bugs/BIC/src/org/stringtemplate/v4/compiler/Group.g
--- ./RegMiner4APR-Regression-Bugs/WORKING/src/org/stringtemplate/v4/compiler/Group.g	2024-09-08 01:36:13.245802508 +1000
+++ ./RegMiner4APR-Regression-Bugs/BIC/src/org/stringtemplate/v4/compiler/Group.g	2024-09-08 01:36:13.237802451 +1000
@@ -67,7 +67,7 @@
 
 import java.util.Collections;
 import java.util.Map;
-import java.util.HashMap;
+import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.ArrayList;
 import org.stringtemplate.v4.misc.*;
@@ -290,7 +290,7 @@
 	;
 
 dict returns [Map<String,Object> mapping]
-@init {mapping=new HashMap<String,Object>();}
+@init {mapping=new LinkedHashMap<String,Object>();}
 	:   '[' dictPairs[mapping] ']'
 	;
 
diff -r -u ./RegMiner4APR-Regression-Bugs/WORKING/src/org/stringtemplate/v4/misc/MapModelAdaptor.java ./RegMiner4APR-Regression-Bugs/BIC/src/org/stringtemplate/v4/misc/MapModelAdaptor.java
--- ./RegMiner4APR-Regression-Bugs/WORKING/src/org/stringtemplate/v4/misc/MapModelAdaptor.java	2024-09-08 01:36:13.249802535 +1000
+++ ./RegMiner4APR-Regression-Bugs/BIC/src/org/stringtemplate/v4/misc/MapModelAdaptor.java	2024-09-08 01:36:13.237802451 +1000
@@ -42,12 +42,12 @@
 		Object value;
 		Map<?, ?> map = (Map<?, ?>)o;
 		if ( property==null ) value = map.get(STGroup.DEFAULT_KEY);
-		else if ( property.equals("keys") ) value = map.keySet();
-		else if ( property.equals("values") ) value = map.values();
 		else if ( map.containsKey(property) ) value = map.get(property);
 		else if ( map.containsKey(propertyName) ) { // if can't find the key, try toString version
 			value = map.get(propertyName);
 		}
+		else if ( property.equals("keys") ) value = map.keySet();
+		else if ( property.equals("values") ) value = map.values();
 		else value = map.get(STGroup.DEFAULT_KEY); // not found, use default
 		if ( value == STGroup.DICT_KEY ) {
 			value = property;
diff -r -u ./RegMiner4APR-Regression-Bugs/WORKING/test/org/stringtemplate/v4/test/TestDictionaries.java ./RegMiner4APR-Regression-Bugs/BIC/test/org/stringtemplate/v4/test/TestDictionaries.java
--- ./RegMiner4APR-Regression-Bugs/WORKING/test/org/stringtemplate/v4/test/TestDictionaries.java	2024-09-08 01:36:13.249802535 +1000
+++ ./RegMiner4APR-Regression-Bugs/BIC/test/org/stringtemplate/v4/test/TestDictionaries.java	2024-09-08 01:36:13.237802451 +1000
@@ -517,4 +517,73 @@
 		assertEquals(expected, result);
 	}
 
+	@Test
+	public void testDictionarySpecialValues() throws Exception {
+		String templates =
+			"t(id) ::= <<\n" +
+			"<identifier.(id)>\n" +
+			">>\n" +
+			"\n" +
+			"identifier ::= [\n" +
+			"	\"keyword\" : \"@keyword\",\n" +
+			"	default : key\n" +
+			"]\n";
+
+		writeFile(tmpdir, "t.stg", templates);
+		STGroupFile group = new STGroupFile(tmpdir + File.separatorChar + "t.stg");
+
+		// try with mapped values
+		ST template = group.getInstanceOf("t").add("id", "keyword");
+		assertEquals("@keyword", template.render());
+
+		// try with non-mapped values
+		template = group.getInstanceOf("t").add("id", "nonkeyword");
+		assertEquals("nonkeyword", template.render());
+
+		// try with non-mapped values that might break (Substring here guarantees unique instances)
+		template = group.getInstanceOf("t").add("id", "_default".substring(1));
+		assertEquals("default", template.render());
+
+		template = group.getInstanceOf("t").add("id", "_keys".substring(1));
+		assertEquals("keyworddefault", template.render());
+
+		template = group.getInstanceOf("t").add("id", "_values".substring(1));
+		assertEquals("@keywordkey", template.render());
+	}
+
+	@Test
+	public void testDictionarySpecialValuesOverride() throws Exception {
+		String templates =
+			"t(id) ::= <<\n" +
+			"<identifier.(id)>\n" +
+			">>\n" +
+			"\n" +
+			"identifier ::= [\n" +
+			"	\"keyword\" : \"@keyword\",\n" +
+			"	\"keys\" : \"keys\",\n" +
+			"	\"values\" : \"values\",\n" +
+			"	default : key\n" +
+			"]\n";
+
+		writeFile(tmpdir, "t.stg", templates);
+		STGroupFile group = new STGroupFile(tmpdir + File.separatorChar + "t.stg");
+
+		// try with mapped values
+		ST template = group.getInstanceOf("t").add("id", "keyword");
+		assertEquals("@keyword", template.render());
+
+		// try with non-mapped values
+		template = group.getInstanceOf("t").add("id", "nonkeyword");
+		assertEquals("nonkeyword", template.render());
+
+		// try with non-mapped values that might break (Substring here guarantees unique instances)
+		template = group.getInstanceOf("t").add("id", "_default".substring(1));
+		assertEquals("default", template.render());
+
+		template = group.getInstanceOf("t").add("id", "_keys".substring(1));
+		assertEquals("keys", template.render());
+
+		template = group.getInstanceOf("t").add("id", "_values".substring(1));
+		assertEquals("values", template.render());
+	}
 }
