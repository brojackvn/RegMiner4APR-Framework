diff -r -u ./RegMiner4APR-Regression-Bugs/WORKING/src/main/java/com/alibaba/fastjson/util/FieldInfo.java ./RegMiner4APR-Regression-Bugs/BIC/src/main/java/com/alibaba/fastjson/util/FieldInfo.java
--- ./RegMiner4APR-Regression-Bugs/WORKING/src/main/java/com/alibaba/fastjson/util/FieldInfo.java	2024-09-08 01:36:24.593881985 +1000
+++ ./RegMiner4APR-Regression-Bugs/BIC/src/main/java/com/alibaba/fastjson/util/FieldInfo.java	2024-09-08 01:36:24.493881285 +1000
@@ -192,7 +192,7 @@
 
         if (clazz != null && fieldClass == Object.class && fieldType instanceof TypeVariable) {
             TypeVariable<?> tv = (TypeVariable<?>) fieldType;
-            Type genericFieldType = getInheritGenericType(clazz, tv);
+            Type genericFieldType = getInheritGenericType(clazz, type, tv);
             if (genericFieldType != null) {
                 this.fieldClass = TypeUtils.getClass(genericFieldType);
                 this.fieldType = genericFieldType;
@@ -289,10 +289,7 @@
             ParameterizedType parameterizedFieldType = (ParameterizedType) fieldType;
 
             Type[] arguments = parameterizedFieldType.getActualTypeArguments();
-            boolean changed = false;
             TypeVariable<?>[] typeVariables = null;
-            Type[] actualTypes = null;
-            
             ParameterizedType paramType = null;
             if (type instanceof ParameterizedType) {
                 paramType = (ParameterizedType) type;
@@ -301,25 +298,8 @@
                 paramType = (ParameterizedType) clazz.getGenericSuperclass();
                 typeVariables = clazz.getSuperclass().getTypeParameters();
             }
-            
-            for (int i = 0; i < arguments.length && paramType != null; ++i) {
-                Type feildTypeArguement = arguments[i];
-                if (feildTypeArguement instanceof TypeVariable) {
-                    TypeVariable<?> typeVar = (TypeVariable<?>) feildTypeArguement;
-
-                    for (int j = 0; j < typeVariables.length; ++j) {
-                        if (typeVariables[j].getName().equals(typeVar.getName())) {
-                            if (actualTypes == null) {
-                                actualTypes = paramType.getActualTypeArguments();
-                            }
-                            if (arguments[i] != actualTypes[j]) {
-                                arguments[i] = actualTypes[j];
-                                changed = true;
-                            }
-                        }
-                    }
-                }
-            }
+
+            boolean changed = getArgument(arguments, typeVariables, paramType.getActualTypeArguments());
             if (changed) {
                 fieldType = new ParameterizedTypeImpl(arguments, parameterizedFieldType.getOwnerType(),
                                                       parameterizedFieldType.getRawType());
@@ -330,35 +310,71 @@
         return fieldType;
     }
 
-    public static Type getInheritGenericType(Class<?> clazz, TypeVariable<?> tv) {
-        Type type = null;
-        GenericDeclaration gd = tv.getGenericDeclaration();
-        Type superGenericType = clazz.getGenericSuperclass();
-
-        do {
-            type = clazz.getGenericSuperclass();
-            if (type == null) {
-                return null;
+    private static boolean getArgument(Type[] typeArgs, TypeVariable[] typeVariables, Type[] arguments) {
+        if (arguments == null || typeVariables.length == 0) {
+            return false;
+        }
+
+        boolean changed = false;
+        for (int i = 0; i < typeArgs.length; ++i) {
+            Type typeArg = typeArgs[i];
+            if (typeArg instanceof ParameterizedType) {
+                ParameterizedType p_typeArg = (ParameterizedType) typeArg;
+                Type[] p_typeArg_args = p_typeArg.getActualTypeArguments();
+                boolean p_changed = getArgument(p_typeArg_args, typeVariables, arguments);
+                if (p_changed) {
+                    typeArgs[i] = new ParameterizedTypeImpl(p_typeArg_args, p_typeArg.getOwnerType(), p_typeArg.getRawType());
+                    changed = true;
+                }
+            } else if (typeArg instanceof TypeVariable) {
+                for (int j = 0; j < typeVariables.length; ++j) {
+                    if (typeArg.equals(typeVariables[j])) {
+                        typeArgs[i] = arguments[j];
+                        changed = true;
+                    }
+                }
             }
+        }
+
+        return changed;
+    }
+
+    private static Type getInheritGenericType(Class<?> clazz, Type type, TypeVariable<?> tv) {
+        Class<?> gd = (Class<?>) tv.getGenericDeclaration();
+
+        Type[] arguments = null;
+        if (gd == clazz) {
             if (type instanceof ParameterizedType) {
                 ParameterizedType ptype = (ParameterizedType) type;
-
-                Type rawType = ptype.getRawType();
-                boolean eq = gd.equals(rawType) || (gd instanceof Class && rawType instanceof Class && ((Class) gd).isAssignableFrom((Class) rawType));
-                if (eq) {
-                    TypeVariable<?>[] tvs = gd.getTypeParameters();
-                    Type[] types = ptype.getActualTypeArguments();
-                    for (int i = 0; i < tvs.length; i++) {
-                        if (tv.equals(tvs[i])) {
-                            return types[i];
-                        }
-                    }
-                    return null;
+                arguments = ptype.getActualTypeArguments();
+            }
+        } else {
+            for (Class<?> c = clazz; c != null && c != Object.class && c != gd; c = c.getSuperclass()) {
+                Type superType = c.getGenericSuperclass();
+
+                if (superType instanceof ParameterizedType) {
+                    ParameterizedType p_superType = (ParameterizedType) superType;
+                    Type[] p_superType_args = p_superType.getActualTypeArguments();
+                    getArgument(p_superType_args, c.getTypeParameters(), arguments);
+                    arguments = p_superType_args;
                 }
             }
-            clazz = TypeUtils.getClass(type);
-        } while (type != null);
-        return null;
+        }
+
+        if (arguments == null) {
+            return null;
+        }
+
+        Type actualType = null;
+        TypeVariable<?>[] typeVariables = gd.getTypeParameters();
+        for (int j = 0; j < typeVariables.length; ++j) {
+            if (tv.equals(typeVariables[j])) {
+                actualType = arguments[j];
+                break;
+            }
+        }
+
+        return actualType;
     }
 
     public String toString() {
Only in ./RegMiner4APR-Regression-Bugs/BIC/src/test/java/com/alibaba/json/bvt/issue_1200: Issue1225.java
Only in ./RegMiner4APR-Regression-Bugs/BIC/src/test/java/com/alibaba/json/bvt/util: GenericFieldInfoTest2.java
Only in ./RegMiner4APR-Regression-Bugs/BIC/src/test/java/com/alibaba/json/bvt/util: GenericFieldInfoTest.java
