diff -r -u ./RegMiner4APR-Regression-Bugs/WORKING/src/main/java/com/univocity/parsers/common/AbstractWriter.java ./RegMiner4APR-Regression-Bugs/BIC/src/main/java/com/univocity/parsers/common/AbstractWriter.java
--- ./RegMiner4APR-Regression-Bugs/WORKING/src/main/java/com/univocity/parsers/common/AbstractWriter.java	2024-09-08 01:36:14.765813153 +1000
+++ ./RegMiner4APR-Regression-Bugs/BIC/src/main/java/com/univocity/parsers/common/AbstractWriter.java	2024-09-08 01:36:14.745813012 +1000
@@ -1735,6 +1735,17 @@
 			Object[] keys = new Object[rowData.size()];
 			final Map<Object, Object> rowValues = new LinkedHashMap<Object, Object>(rowData.size());
 
+			if(headers == null){
+				if(headerMapping != null){
+					setHeadersFromMap(headerMapping, true);
+				} else {
+					setHeadersFromMap(rowData, true);
+				}
+				if(isHeaderWritingEnabled && recordCount == 0){
+					outputList.add(writeHeadersToString());
+				}
+			}
+
 			int length = 0;
 			for (Map.Entry<K, I> rowEntry : rowData.entrySet()) {
 				iterators[length] = rowEntry.getValue() == null ? null : rowEntry.getValue().iterator();
diff -r -u ./RegMiner4APR-Regression-Bugs/WORKING/src/test/java/com/univocity/parsers/examples/CsvParserExamples.java ./RegMiner4APR-Regression-Bugs/BIC/src/test/java/com/univocity/parsers/examples/CsvParserExamples.java
--- ./RegMiner4APR-Regression-Bugs/WORKING/src/test/java/com/univocity/parsers/examples/CsvParserExamples.java	2024-09-08 01:36:14.769813180 +1000
+++ ./RegMiner4APR-Regression-Bugs/BIC/src/test/java/com/univocity/parsers/examples/CsvParserExamples.java	2024-09-08 01:36:14.749813041 +1000
@@ -85,6 +85,53 @@
 	}
 
 	@Test
+	public void example002IteratorOverCsv() throws Exception {
+		StringBuilder out = new StringBuilder();
+
+		CsvParserSettings settings = new CsvParserSettings();
+		//the file used in the example uses '\n' as the line separator sequence.
+		//the line separator sequence is defined here to ensure systems such as MacOS and Windows
+		//are able to process this file correctly (MacOS uses '\r'; and Windows uses '\r\n').
+		settings.getFormat().setLineSeparator("\n");
+
+		//##CODE_START
+
+		// creates a CSV parser
+		CsvParser parser = new CsvParser(settings);
+
+		for(String[] row : parser.iterate(getReader("/examples/example.csv"))){
+			println(out, Arrays.toString(row));
+		}
+
+		//##CODE_END
+
+		printAndValidate(out);
+	}
+
+	@Test
+	public void example002RecordIteratorOverCsv() throws Exception {
+		StringBuilder out = new StringBuilder();
+
+		CsvParserSettings settings = new CsvParserSettings();
+		//the file used in the example uses '\n' as the line separator sequence.
+		//the line separator sequence is defined here to ensure systems such as MacOS and Windows
+		//are able to process this file correctly (MacOS uses '\r'; and Windows uses '\r\n').
+		settings.getFormat().setLineSeparator("\n");
+
+		// creates a CSV parser
+		CsvParser parser = new CsvParser(settings);
+
+		//##CODE_START
+		for(Record record : parser.iterateRecords(getReader("/examples/example.csv"))){
+			println(out, Arrays.toString(record.getValues()));
+		}
+
+		//##CODE_END
+
+		printAndValidate(out);
+	}
+
+	@Test
 	public void example003ReadCsvWithRowProcessor() throws Exception {
 		//##CODE_START
 
@@ -370,6 +417,46 @@
 
 		printAndValidate(out);
 	}
+
+	@Test
+	public void example011ErrorHandlingWithRetry() {
+		final StringBuilder out = new StringBuilder();
+
+		CsvParserSettings settings = new CsvParserSettings();
+		settings.getFormat().setLineSeparator("\n");
+
+		BeanListProcessor<AnotherTestBean> beanProcessor = new BeanListProcessor<AnotherTestBean>(AnotherTestBean.class);
+		settings.setProcessor(beanProcessor);
+
+		//##CODE_START
+		settings.setProcessorErrorHandler(new RetryableErrorHandler<ParsingContext>() {
+			@Override
+			public void handleError(DataProcessingException error, Object[] inputRow, ParsingContext context) {
+				println(out, "Error processing row: " + Arrays.toString(inputRow));
+				println(out, "Error details: column '" + error.getColumnName() + "' (index " + error.getColumnIndex() + ") has value '" + inputRow[error.getColumnIndex()] + "'. Setting it to null");
+
+				if(error.getColumnIndex() == 0){
+					setDefaultValue(null);
+				} else {
+					keepRecord(); //prevents the parser from discarding the row.
+				}
+			}
+		});
+		//##CODE_END
+
+
+		CsvParser parser = new CsvParser(settings);
+		parser.parse(getReader("/examples/bean_test.csv"));
+
+		println(out);
+		println(out, "Printing beans that could be parsed");
+		println(out);
+		for (AnotherTestBean bean : beanProcessor.getBeans()) {
+			println(out, bean); //should print two beans
+		}
+
+		printAndValidate(out);
+	}
 
 	@Test
 	public void example012FormatAutodetection() throws Exception {
diff -r -u ./RegMiner4APR-Regression-Bugs/WORKING/src/test/java/com/univocity/parsers/examples/CsvWriterExamples.java ./RegMiner4APR-Regression-Bugs/BIC/src/test/java/com/univocity/parsers/examples/CsvWriterExamples.java
--- ./RegMiner4APR-Regression-Bugs/WORKING/src/test/java/com/univocity/parsers/examples/CsvWriterExamples.java	2024-09-08 01:36:14.769813180 +1000
+++ ./RegMiner4APR-Regression-Bugs/BIC/src/test/java/com/univocity/parsers/examples/CsvWriterExamples.java	2024-09-08 01:36:14.749813041 +1000
@@ -15,9 +15,17 @@
  ******************************************************************************/
 package com.univocity.parsers.examples;
 
+import com.univocity.parsers.common.*;
+import com.univocity.parsers.common.processor.*;
 import com.univocity.parsers.csv.*;
+import com.univocity.parsers.issues.github.*;
 import org.testng.annotations.*;
 
+import java.io.*;
+import java.util.*;
+
+import static org.testng.Assert.*;
+
 public class CsvWriterExamples extends Example {
 
 	@Test
diff -r -u ./RegMiner4APR-Regression-Bugs/WORKING/src/test/java/com/univocity/parsers/examples/WriterExamples.java ./RegMiner4APR-Regression-Bugs/BIC/src/test/java/com/univocity/parsers/examples/WriterExamples.java
--- ./RegMiner4APR-Regression-Bugs/WORKING/src/test/java/com/univocity/parsers/examples/WriterExamples.java	2024-09-08 01:36:14.769813180 +1000
+++ ./RegMiner4APR-Regression-Bugs/BIC/src/test/java/com/univocity/parsers/examples/WriterExamples.java	2024-09-08 01:36:14.749813041 +1000
@@ -361,6 +361,7 @@
 		CsvWriterSettings settings = new CsvWriterSettings();
 
 		// Using the object row writer processor, we can apply conversions to be applied by default over specific types/
+		//##CODE_START
 		ObjectRowWriterProcessor processor = new ObjectRowWriterProcessor();
 
 		//Strings are trimmed and lower cased by default
@@ -372,11 +373,11 @@
 		processor.convertFields(Conversions.toBoolean(null, "N/A", "Y", "N")).add("Boolean column");
 
 		settings.setRowWriterProcessor(processor);
+		settings.setHeaderWritingEnabled(true);
 
 		//Let's create a CSV writer
 		CsvWriter writer = new CsvWriter(settings);
 
-		//##CODE_START
 		//Creating a map of rows to write our data. Keys will be used as the headers
 		//Each entry contains the values of a column
 		Map<String, Object[]> rows = new LinkedHashMap<String, Object[]>();
@@ -504,10 +505,8 @@
 
 		//##CODE_START
 		settings.setHeaderWritingEnabled(true);
-		settings.setHeaders("Header 5", "Header 7", "Header 10");
 
 		TsvWriter writer = new TsvWriter(output, settings);
-		writer.writeHeaders();
 
 		//Creating a map of rows to write our data.
 		//Each entry contains the values of a column
Only in ./RegMiner4APR-Regression-Bugs/BIC/src/test/resources/examples/expectedOutputs/CsvParserExamples: example011ErrorHandlingWithRetry.txt
diff -r -u ./RegMiner4APR-Regression-Bugs/WORKING/src/test/resources/examples/expectedOutputs/WriterExamples/example009WriteMapWithTypeConversion ./RegMiner4APR-Regression-Bugs/BIC/src/test/resources/examples/expectedOutputs/WriterExamples/example009WriteMapWithTypeConversion
--- ./RegMiner4APR-Regression-Bugs/WORKING/src/test/resources/examples/expectedOutputs/WriterExamples/example009WriteMapWithTypeConversion	2024-09-08 01:36:14.773813208 +1000
+++ ./RegMiner4APR-Regression-Bugs/BIC/src/test/resources/examples/expectedOutputs/WriterExamples/example009WriteMapWithTypeConversion	2024-09-08 01:36:14.753813068 +1000
@@ -1,3 +1,4 @@
+String column,Boolean column,Last column
 paid,N/A,199
 paid,Y,288
 paid,N,11
