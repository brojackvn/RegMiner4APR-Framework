diff -r -u ./RegMiner4APR-Regression-Bugs/WORKING/src/main/java/org/logicng/explanations/smus/SmusComputation.java ./RegMiner4APR-Regression-Bugs/BIC/src/main/java/org/logicng/explanations/smus/SmusComputation.java
--- ./RegMiner4APR-Regression-Bugs/WORKING/src/main/java/org/logicng/explanations/smus/SmusComputation.java	2024-09-08 01:36:07.773764185 +1000
+++ ./RegMiner4APR-Regression-Bugs/BIC/src/main/java/org/logicng/explanations/smus/SmusComputation.java	2024-09-08 01:36:07.689763596 +1000
@@ -71,13 +76,31 @@
      * @param handler               the handler, can be {@code null}
      * @return the SMUS or {@code null} if the given propositions are satisfiable
      */
+    public static <P extends Proposition> List<P> computeSmus(final List<P> propositions, final List<Formula> additionalConstraints, final FormulaFactory f,
+                                                              final OptimizationHandler handler) {
+        start(handler);
         final SATSolver growSolver = MiniSat.miniSat(f);
         growSolver.add(additionalConstraints == null ? Collections.singletonList(f.verum()) : additionalConstraints);
         final Map<Variable, P> propositionMapping = new TreeMap<>();
@@ -86,13 +109,23 @@
             propositionMapping.put(selector, proposition);
             growSolver.add(f.equivalence(selector, proposition.formula()));
         }
-        if (growSolver.sat(propositionMapping.keySet()) == Tristate.TRUE) {
-            return null; // no MUS, since propositions are SAT
+        final boolean sat = growSolver.sat(satHandler(handler), propositionMapping.keySet()) == Tristate.TRUE;
+        if (aborted(handler)) {
+            return null;
+        }
+        if (sat) {
+            throw new IllegalArgumentException("Cannot compute a smallest MUS for a satisfiable formula set.");
         }
         final SATSolver hSolver = MiniSat.miniSat(f);
         while (true) {
-            final SortedSet<Variable> h = minimumHs(hSolver, propositionMapping.keySet());
-            final SortedSet<Variable> c = grow(growSolver, h, propositionMapping.keySet());
+            final SortedSet<Variable> h = minimumHs(hSolver, propositionMapping.keySet(), handler);
+            if (aborted(handler)) {
+                return null;
+            }
+            final SortedSet<Variable> c = grow(growSolver, h, propositionMapping.keySet(), handler);
+            if (aborted(handler)) {
+                return null;
+            }
             if (c == null) {
                 return h.stream().map(propositionMapping::get).collect(Collectors.toList());
             }
diff -r -u ./RegMiner4APR-Regression-Bugs/WORKING/src/main/java/org/logicng/handlers/Handler.java ./RegMiner4APR-Regression-Bugs/BIC/src/main/java/org/logicng/handlers/Handler.java
--- ./RegMiner4APR-Regression-Bugs/WORKING/src/main/java/org/logicng/handlers/Handler.java
+++ ./RegMiner4APR-Regression-Bugs/BIC/src/main/java/org/logicng/handlers/Handler.java
@@ -41,10 +41,33 @@
      * Returns whether the computation was aborted by the handler.
      * @return {@code true} if the computation was aborted by the handler, otherwise {@code false}
      */
-    boolean aborted();
+    default boolean aborted() {
+        return false;
+    }
 
     /**
      * This method is called when the computation starts.
      */
-    void started();
+    default void started() {
+    }

     /**
      * Returns {@code true} if the handler is not {@code null} and is already aborted.
      * @param handler the handler to check
      * @return {@code true} if the handler is not {@code null} and is already aborted, otherwise {@code false}
      */
+    static boolean aborted(final Handler handler) {
+        return handler != null && handler.aborted();
+    }

     /**
      * Null-safe helper method to start a handler.
      * @param handler the handler to start, may be {@code null}
      */
+    static void start(final Handler handler) {
+        if (handler != null) {
+            handler.started();
+        }
+    }
 }
diff -r -u ./RegMiner4APR-Regression-Bugs/WORKING/src/main/java/org/logicng/handlers/OptimizationHandler.java ./RegMiner4APR-Regression-Bugs/BIC/src/main/java/org/logicng/handlers/OptimizationHandler.java
--- ./RegMiner4APR-Regression-Bugs/WORKING/src/main/java/org/logicng/handlers/OptimizationHandler.java
+++ ./RegMiner4APR-Regression-Bugs/BIC/src/main/java/org/logicng/handlers/OptimizationHandler.java
@@ -54,19 +54,33 @@
      * @param handler the optimization handler
      * @return The SAT handler if the optimization handler is not {@code null}, otherwise {@code null}
      */
+    static SATHandler satHandler(final OptimizationHandler handler) {
+        return handler == null ? null : handler.satHandler();
+    }
+}
diff -r -u ./RegMiner4APR-Regression-Bugs/WORKING/src/main/java/org/logicng/handlers/SATHandler.java ./RegMiner4APR-Regression-Bugs/BIC/src/main/java/org/logicng/handlers/SATHandler.java
--- ./RegMiner4APR-Regression-Bugs/WORKING/src/main/java/org/logicng/handlers/SATHandler.java
+++ ./RegMiner4APR-Regression-Bugs/BIC/src/main/java/org/logicng/handlers/SATHandler.java
@@ -54,19 +54,33 @@
      * Null-safe helper method to call {@link SATHandler#finishedSolving} on a handler.
      * @param handler the handler to finished, may be {@code null}
      */
+    static void finishSolving(final SATHandler handler) {
+        if (handler != null) {
+            handler.finishedSolving();
+        }
+    }
 }
diff -r -u ./RegMiner4APR-Regression-Bugs/WORKING/src/main/java/org/logicng/solvers/sat/MiniSat2Solver.java ./RegMiner4APR-Regression-Bugs/BIC/src/main/java/org/logicng/solvers/sat/MiniSat2Solver.java
--- ./RegMiner4APR-Regression-Bugs/WORKING/src/main/java/org/logicng/solvers/sat/MiniSat2Solver.java
+++ ./RegMiner4APR-Regression-Bugs/BIC/src/main/java/org/logicng/solvers/sat/MiniSat2Solver.java
@@ -194,9 +197,7 @@
     @Override
     public Tristate solve(final SATHandler handler) {
         this.handler = handler;
-        if (this.handler != null) {
-            this.handler.started();
-        }
+        start(handler);
         this.model.clear();
         this.conflict.clear();
         if (!this.ok) {
@@ -227,9 +228,7 @@
         } else if (status == Tristate.FALSE && this.conflict.empty()) {
             this.ok = false;
         }
-        if (this.handler != null) {
-            this.handler.finishedSolving();
-        }
+        finishSolving(handler);
         cancelUntil(0);
         this.handler = null;
         this.canceledByHandler = false;