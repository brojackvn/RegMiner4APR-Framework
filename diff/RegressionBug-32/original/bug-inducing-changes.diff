diff -r -u ./RegMiner4APR-Regression-Bugs/WORKING/src/main/java/com/univocity/parsers/csv/CsvFormatDetector.java ./RegMiner4APR-Regression-Bugs/BIC/src/main/java/com/univocity/parsers/csv/CsvFormatDetector.java
--- ./RegMiner4APR-Regression-Bugs/WORKING/src/main/java/com/univocity/parsers/csv/CsvFormatDetector.java	2024-09-08 01:36:14.481811163 +1000
+++ ./RegMiner4APR-Regression-Bugs/BIC/src/main/java/com/univocity/parsers/csv/CsvFormatDetector.java	2024-09-08 01:36:14.457810995 +1000
@@ -145,7 +145,7 @@
 
 			afterNewLine = false;
 
-			if (isSymbol(ch)) { //counts all symbols. Skips letters, digits and white spaces (except the tab character)
+			if (isSymbol(ch)) { //counts all symbols. Skips letters, digits and special symbols
 				allSymbols.add(ch);
 				increment(symbols, ch);
 			} else if ((ch == '\r' || ch == '\n' || ch == normalizedNewLine) && symbols.size() > 0) { //got a newline and collected some symbols? Good!
@@ -325,7 +325,7 @@
 	}
 
 	private boolean isSymbol(char ch) {
-		return ch != comment && !Character.isLetterOrDigit(ch) && (ch == '\t' || ch > ' ');
+		return ch != comment && !Character.isLetterOrDigit(ch) && (ch == '\t' || ch >= ' ');
 	}
 
 	/**
diff -r -u ./RegMiner4APR-Regression-Bugs/WORKING/src/test/java/com/univocity/parsers/csv/CsvParserTest.java ./RegMiner4APR-Regression-Bugs/BIC/src/test/java/com/univocity/parsers/csv/CsvParserTest.java
--- ./RegMiner4APR-Regression-Bugs/WORKING/src/test/java/com/univocity/parsers/csv/CsvParserTest.java	2024-09-08 01:36:14.481811163 +1000
+++ ./RegMiner4APR-Regression-Bugs/BIC/src/test/java/com/univocity/parsers/csv/CsvParserTest.java	2024-09-08 01:36:14.457810995 +1000
@@ -837,4 +837,34 @@
 		csvParser.parse(new StringReader(csv));
 		assertEquals(headersFromContext[0], userDefinedHeader);
 	}
+
+	@Test
+	public void shouldResolveSpaceAsColumnSeparator() {
+		final Reader csv = new StringReader("<TICKER> <PER> <DATE> <TIME> <OPEN> <HIGH> <LOW> <CLOSE> <VOL>\n" +
+				"MOEX 15 12/03/18 10:15:00 90.0900000 90.9500000 90.0700000 90.8200000 468,730\n" +
+				"MOEX 15 12/03/18 10:30:00 90.8200000 90.8600000 90.6000000 90.7100000 136,040\n" +
+				"MOEX 15 12/03/18 10:45:00 90.7000000 91.3000000 90.6600000 90.9900000 278,580");
+		final CsvParserSettings settings = new CsvParserSettings();
+		settings.setReadInputOnSeparateThread(false);
+		settings.setLineSeparatorDetectionEnabled(true);
+		settings.setDelimiterDetectionEnabled(true, ',', ' ', ';');
+		final CsvParser csvParser = new CsvParser(settings);
+		csvParser.beginParsing(csv);
+		assertEquals(csvParser.getDetectedFormat().getDelimiter(), ' ');
+	}
+
+	@Test
+	public void shouldNotResolveSpaceAsColumnSeparator() {
+		final Reader csv = new StringReader("<COL TICKER>,<COL PER>,<COL DATE>,<COL TIME>,<COL OPEN>,<COL HIGH>,<COL LOW>,<COL CLOSE>,<COL VOL>\n" +
+				"MOEX,15,12/03/18,10:15:00,90.0900000,90.9500000,90.0700000,90.8200000,468,730\n" +
+				"MOEX,15,12/03/18,10:30:00,90.8200000,90.8600000,90.6000000,90.7100000,136,040\n" +
+				"MOEX,15,12/03/18,10:45:00,90.7000000,91.3000000,90.6600000,90.9900000,278,580");
+		final CsvParserSettings settings = new CsvParserSettings();
+		settings.setReadInputOnSeparateThread(false);
+		settings.setLineSeparatorDetectionEnabled(true);
+		settings.setDelimiterDetectionEnabled(true, ' ', ',', ';');
+		final CsvParser csvParser = new CsvParser(settings);
+		csvParser.beginParsing(csv);
+		assertEquals(csvParser.getDetectedFormat().getDelimiter(), ',');
+	}
 }
