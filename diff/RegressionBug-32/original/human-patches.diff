diff -r -u ./RegMiner4APR-Regression-Bugs/BUGGY/src/main/java/com/univocity/parsers/common/ArgumentUtils.java ./RegMiner4APR-Regression-Bugs/BFC/src/main/java/com/univocity/parsers/common/ArgumentUtils.java
--- ./RegMiner4APR-Regression-Bugs/BUGGY/src/main/java/com/univocity/parsers/common/ArgumentUtils.java	2024-09-08 01:36:14.465811051 +1000
+++ ./RegMiner4APR-Regression-Bugs/BFC/src/main/java/com/univocity/parsers/common/ArgumentUtils.java	2024-09-08 01:36:14.433810827 +1000
@@ -80,6 +80,7 @@
 	 * @param array         the element array
 	 * @param element       the element to be looked for in the array.
 	 * @param fieldSelector a field selector that indicates which elements of the given array are selected.
+	 *
 	 * @return the index of the given element in the array, or -1 if the element could not be found.
 	 */
 	public static int indexOf(NormalizedString[] array, NormalizedString element, FieldSelector fieldSelector) {
@@ -103,6 +104,7 @@
 	 *
 	 * @param array   the element array
 	 * @param element the element to be looked for in the array.
+	 *
 	 * @return the indexes of the given element in the array, or an empty array if no element could be found
 	 */
 	public static int[] indexesOf(Object[] array, Object element) {
@@ -129,6 +131,7 @@
 	 *
 	 * @param array   the element array
 	 * @param element the element to be looked for in the array.
+	 *
 	 * @return the index of the given element in the array, or -1 if the element could not be found.
 	 */
 	public static int indexOf(Object[] array, Object element) {
@@ -136,11 +139,30 @@
 	}
 
 	/**
+	 * Returns the index of a character in a given array.
+	 *
+	 * @param array   the character array
+	 * @param element the character to be looked for in the array.
+	 * @param from    the starting position of the array from where to start the search
+	 *
+	 * @return the index of the given character in the array, or -1 if the character could not be found.
+	 */
+	public static int indexOf(char[] array, char element, int from) {
+		for (int i = from; i < array.length; i++) {
+			if (array[i] == element) {
+				return i;
+			}
+		}
+		return -1;
+	}
+
+	/**
 	 * Returns the index of an element in a given array.
 	 *
 	 * @param array   the element array
 	 * @param element the element to be looked for in the array.
 	 * @param from    the starting position of the array from where to start the search
+	 *
 	 * @return the index of the given element in the array, or -1 if the element could not be found.
 	 */
 	private static int indexOf(Object[] array, Object element, int from) {
@@ -180,6 +202,7 @@
 	 *
 	 * @param array    An array with elements
 	 * @param elements the elements to be found
+	 *
 	 * @return the elements not found in the array.
 	 */
 	public static Object[] findMissingElements(Object[] array, Collection<?> elements) {
@@ -191,6 +214,7 @@
 	 *
 	 * @param array    An array with elements
 	 * @param elements the elements to be found
+	 *
 	 * @return the elements not found in the array.
 	 */
 	public static Object[] findMissingElements(Object[] array, Object[] elements) {
@@ -209,6 +233,7 @@
 	 * Creates a {@link java.io.Writer} from an output stream
 	 *
 	 * @param output the output stream
+	 *
 	 * @return {@link java.io.Writer} wrapping the given output stream
 	 */
 	public static Writer newWriter(OutputStream output) {
@@ -220,6 +245,7 @@
 	 *
 	 * @param output   the output stream
 	 * @param encoding the encoding to use when writing to the output stream
+	 *
 	 * @return {@link java.io.Writer} wrapping the given output stream
 	 */
 	public static Writer newWriter(OutputStream output, String encoding) {
@@ -231,6 +257,7 @@
 	 *
 	 * @param output   the output stream
 	 * @param encoding the encoding to use when writing to the output stream
+	 *
 	 * @return {@link java.io.Writer} wrapping the given output stream
 	 */
 	public static Writer newWriter(OutputStream output, Charset encoding) {
@@ -245,6 +272,7 @@
 	 * Creates a {@link java.io.Writer} from a file
 	 *
 	 * @param file the file to be written
+	 *
 	 * @return {@link java.io.Writer} for the given file
 	 */
 	public static Writer newWriter(File file) {
@@ -256,6 +284,7 @@
 	 *
 	 * @param file     the file to be written
 	 * @param encoding the encoding to use when writing to the file
+	 *
 	 * @return {@link java.io.Writer} for the given file
 	 */
 	public static Writer newWriter(File file, String encoding) {
@@ -267,6 +296,7 @@
 	 *
 	 * @param file     the file to be written
 	 * @param encoding the encoding to use when writing to the file
+	 *
 	 * @return {@link java.io.Writer} for the given file
 	 */
 	public static Writer newWriter(File file, Charset encoding) {
@@ -296,6 +326,7 @@
 	 * Creates a {@link java.io.Reader} from an input stream
 	 *
 	 * @param input the input stream
+	 *
 	 * @return a {@link java.io.Reader} wrapping the given input stream
 	 */
 	public static Reader newReader(InputStream input) {
@@ -307,6 +338,7 @@
 	 *
 	 * @param input    the input stream
 	 * @param encoding the encoding to use when reading from the input stream
+	 *
 	 * @return a {@link java.io.Reader} wrapping the given input stream
 	 */
 	public static Reader newReader(InputStream input, String encoding) {
@@ -318,6 +350,7 @@
 	 *
 	 * @param input    the input stream
 	 * @param encoding the encoding to use when reading from the input stream
+	 *
 	 * @return a {@link java.io.Reader} wrapping the given input stream
 	 */
 	public static Reader newReader(InputStream input, Charset encoding) {
@@ -344,6 +377,7 @@
 	 * Creates a {@link java.io.Reader} for a given a file
 	 *
 	 * @param file the file to be read
+	 *
 	 * @return a {@link java.io.Reader} for reading the given file
 	 */
 	public static Reader newReader(File file) {
@@ -355,6 +389,7 @@
 	 *
 	 * @param file     the file to be read
 	 * @param encoding the encoding to be used when reading from the file
+	 *
 	 * @return a {@link java.io.Reader} for reading the given file
 	 */
 	public static Reader newReader(File file, String encoding) {
@@ -366,6 +401,7 @@
 	 *
 	 * @param file     the file to be read
 	 * @param encoding the encoding to be used when reading from the file
+	 *
 	 * @return a {@link java.io.Reader} for reading the given file
 	 */
 	public static Reader newReader(File file, Charset encoding) {
@@ -383,6 +419,7 @@
 	 * Converts a list of enumerations to an array of their {@link Enum#toString()} representation
 	 *
 	 * @param enums a list of enumerations to convert
+	 *
 	 * @return an array of {@code String} with the values produced by each element's {@link Enum#toString()} method.
 	 */
 	@SuppressWarnings("rawtypes")
@@ -401,6 +438,7 @@
 	 * Converts any collection of {@code Integer} into an {@code int} array.
 	 *
 	 * @param ints a collection of (boxed) integers.
+	 *
 	 * @return a primitive {@code int} array with the unboxed integer values.
 	 */
 	public static int[] toIntArray(Collection<Integer> ints) {
@@ -419,6 +457,7 @@
 	 * Converts any collection of {@code Character} into a char array.
 	 *
 	 * @param characters a collection of (boxed) characters.
+	 *
 	 * @return a primitive {@code char} array with the unboxed character values.
 	 */
 	public static char[] toCharArray(Collection<Character> characters) {
@@ -437,6 +476,7 @@
 	 *
 	 * @param length  the maximum length to be displayed. If {@code 0}, the {@code "<omitted>"} string will be returned.
 	 * @param content the content whose length should be restricted.
+	 *
 	 * @return the restricted content.
 	 */
 	public static String restrictContent(int length, CharSequence content) {
@@ -462,6 +502,7 @@
 	 *
 	 * @param length  the maximum length to be displayed. If {@code 0}, the {@code "<omitted>"} string will be returned.
 	 * @param content the content whose length should be restricted.
+	 *
 	 * @return the restricted content.
 	 */
 	public static String restrictContent(int length, Object content) {
@@ -493,6 +534,7 @@
 	 * Converts a sequence of int numbers into a byte array.
 	 *
 	 * @param ints the integers to be cast to by
+	 *
 	 * @return the resulting byte array.
 	 */
 	public static byte[] toByteArray(int... ints) {
@@ -508,6 +550,7 @@
 	 *
 	 * @param array the search array
 	 * @param <T>   the type of elements held in the given array.
+	 *
 	 * @return all duplicate values found in the given array, or empty array if no duplicates, or {@code null} if the input is {@code null}.
 	 */
 	public static <T> T[] findDuplicates(T[] array) {
@@ -535,6 +578,7 @@
 	 * @param input the content to trim
 	 * @param left  flag to indicate whether spaces on the left side of the string should be removed.
 	 * @param right flag to indicate whether spaces on the right side of the string should be removed.
+	 *
 	 * @return the trimmed string.
 	 */
 	public static String trim(String input, boolean left, boolean right) {
@@ -577,6 +621,7 @@
 	 * @param str        the string to have its line separators displayed
 	 * @param addNewLine flag indicating whether the original `\r` or `\n` characters should be kept in the string.
 	 *                   if {@code true}, `\r` will be replaced by `[cr]\r` for example.
+	 *
 	 * @return the updated string with any line separators replaced by visible character sequences.
 	 */
 	public static String displayLineSeparators(String str, boolean addNewLine) {
diff -r -u ./RegMiner4APR-Regression-Bugs/BUGGY/src/main/java/com/univocity/parsers/csv/CsvFormatDetector.java ./RegMiner4APR-Regression-Bugs/BFC/src/main/java/com/univocity/parsers/csv/CsvFormatDetector.java
--- ./RegMiner4APR-Regression-Bugs/BUGGY/src/main/java/com/univocity/parsers/csv/CsvFormatDetector.java	2024-09-08 01:36:14.469811079 +1000
+++ ./RegMiner4APR-Regression-Bugs/BFC/src/main/java/com/univocity/parsers/csv/CsvFormatDetector.java	2024-09-08 01:36:14.437810855 +1000
@@ -15,6 +15,7 @@
  ******************************************************************************/
 package com.univocity.parsers.csv;
 
+import com.univocity.parsers.common.*;
 import com.univocity.parsers.common.input.*;
 
 import java.util.*;
@@ -33,12 +34,14 @@
 	private final char normalizedNewLine;
 	private final int whitespaceRangeStart;
 	private char[] allowedDelimiters;
+	private char[] delimiterPreference;
 
 	/**
 	 * Builds a new {@code CsvFormatDetector}
 	 *
 	 * @param maxRowSamples        the number of row samples to collect before analyzing the statistics
-	 * @param settings             the configuration provided by the user with potential defaults in case the detection is unable to discover the proper column delimiter or quote character.
+	 * @param settings             the configuration provided by the user with potential defaults in case the detection is unable to discover the proper column
+	 *                             delimiter or quote character.
 	 * @param whitespaceRangeStart starting range of characters considered to be whitespace.
 	 */
 	CsvFormatDetector(int maxRowSamples, CsvParserSettings settings, int whitespaceRangeStart) {
@@ -48,11 +51,13 @@
 
 		if (allowedDelimiters != null && allowedDelimiters.length > 0) {
 			suggestedDelimiter = allowedDelimiters[0];
+			delimiterPreference = allowedDelimiters.clone();
 			Arrays.sort(allowedDelimiters);
 		} else {
 			String delimiter = settings.getFormat().getDelimiterString();
 			suggestedDelimiter = delimiter.length() > 1 ? ',' : settings.getFormat().getDelimiter();
 			allowedDelimiters = new char[0];
+			delimiterPreference = allowedDelimiters;
 		}
 
 		normalizedNewLine = settings.getFormat().getNormalizedNewline();
@@ -101,7 +106,7 @@
 				while (++i < length) {
 					ch = characters[i];
 					if (ch == '\r' || ch == '\n' || ch == normalizedNewLine) {
-						if(ch == '\r' && i + 1 < characters.length && characters[i + 1] == '\n'){
+						if (ch == '\r' && i + 1 < characters.length && characters[i + 1] == '\n') {
 							i++;
 						}
 						break;
@@ -313,7 +318,13 @@
 					Integer newTotal = totals.get(newChar);
 
 					if (currentTotal != null && newTotal != null) {
-						if ((min && newTotal > currentTotal) || (!min && newTotal > currentTotal)) {
+						if (currentTotal.equals(newTotal)) {
+							int defIndex = ArgumentUtils.indexOf(delimiterPreference, defaultChar, 0);
+							int newIndex = ArgumentUtils.indexOf(delimiterPreference, newChar, 0);
+							if (defIndex != -1 && newIndex != -1) {
+								defaultChar = defIndex < newIndex ? defaultChar : newChar;
+							}
+						} else if ((min && newTotal > currentTotal) || (!min && newTotal > currentTotal)) {
 							defaultChar = newChar;
 						}
 					} else if (isSymbol(newChar)) {
