diff -r -u ./RegMiner4APR-Regression-Bugs/BUGGY/src/main/java/com/zaxxer/hikari/HikariConfig.java ./RegMiner4APR-Regression-Bugs/BFC/src/main/java/com/zaxxer/hikari/HikariConfig.java
--- ./RegMiner4APR-Regression-Bugs/BUGGY/src/main/java/com/zaxxer/hikari/HikariConfig.java
+++ ./RegMiner4APR-Regression-Bugs/BFC/src/main/java/com/zaxxer/hikari/HikariConfig.java
@@ -42,6 +42,7 @@
 import java.util.concurrent.ThreadLocalRandom;
 
 import static com.zaxxer.hikari.util.UtilityElf.getNullIfEmpty;
+import static com.zaxxer.hikari.util.UtilityElf.safeIsAssignableFrom;
 import static java.util.concurrent.TimeUnit.MINUTES;
 import static java.util.concurrent.TimeUnit.SECONDS;
 
@@ -758,8 +759,8 @@
       if (metricRegistry != null) {
          metricRegistry = getObjectOrPerformJndiLookup(metricRegistry);
 
-         if (!(metricRegistry.getClass().getName().contains("MetricRegistry"))
-             && !(metricRegistry.getClass().getName().contains("MeterRegistry"))) {
+         if (!safeIsAssignableFrom(metricRegistry, "com.codahale.metrics.MetricRegistry")
+             && !(safeIsAssignableFrom(metricRegistry, "io.micrometer.core.instrument.MeterRegistry"))) {
             throw new IllegalArgumentException("Class must be instance of com.codahale.metrics.MetricRegistry or io.micrometer.core.instrument.MeterRegistry");
          }
       }
diff -r -u ./RegMiner4APR-Regression-Bugs/BUGGY/src/main/java/com/zaxxer/hikari/util/UtilityElf.java ./RegMiner4APR-Regression-Bugs/BFC/src/main/java/com/zaxxer/hikari/util/UtilityElf.java
--- ./RegMiner4APR-Regression-Bugs/BUGGY/src/main/java/com/zaxxer/hikari/util/UtilityElf.java
+++ ./RegMiner4APR-Regression-Bugs/BFC/src/main/java/com/zaxxer/hikari/util/UtilityElf.java
@@ -66,6 +66,21 @@
     * @param className String class
     * @return true if object is assignable from the type, false otherwise or when the class cannot be loaded
     */
+   public static boolean safeIsAssignableFrom(Object obj, String className) {
+      try {
+         Class<?> clazz = Class.forName(className);
+         return clazz.isAssignableFrom(obj.getClass());
+      } catch (ClassNotFoundException ignored) {
+         return false;
+      }
+   }
 
    /**
     * Create and instance of the specified class using the constructor matching the specified