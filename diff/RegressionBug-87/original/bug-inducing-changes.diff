diff -r -u ./RegMiner4APR-Regression-Bugs/WORKING/java/src/com/google/template/soy/base/internal/BaseUtils.java ./RegMiner4APR-Regression-Bugs/BIC/java/src/com/google/template/soy/base/internal/BaseUtils.java
--- ./RegMiner4APR-Regression-Bugs/WORKING/java/src/com/google/template/soy/base/internal/BaseUtils.java	2024-09-08 01:36:27.909905209 +1000
+++ ./RegMiner4APR-Regression-Bugs/BIC/java/src/com/google/template/soy/base/internal/BaseUtils.java	2024-09-08 01:36:27.865904901 +1000
@@ -16,11 +16,7 @@
 
 package com.google.template.soy.base.internal;
 
-import static java.nio.charset.StandardCharsets.UTF_8;
-
-import com.google.common.base.Preconditions;
 import com.google.common.collect.Sets;
-import com.google.common.hash.Hashing;
 import java.io.File;
 import java.util.Set;
 import java.util.regex.Pattern;
@@ -264,19 +260,4 @@
           .append(HEX_DIGITS[codePoint & 0xF]);
     }
   }
-
-  /**
-   * Computes the SHA-1 hash value of the input string's UTF-8 representation and returns the first
-   * numBits bits of the result as a hex value in string form.
-   *
-   * @param strToHash The string to compute SHA-1 of.
-   * @param numBits The number of bits worth to return. Must be a positive number at most 160 and
-   *     divisible by 8 (since we process the result 8 bits at a time).
-   * @return The partial SHA-1 hash value as a hex string.
-   */
-  public static String computePartialSha1AsHexString(String strToHash, int numBits) {
-    Preconditions.checkArgument(numBits > 0 && numBits <= 160 && numBits % 8 == 0);
-    int numBytes = numBits / 8;
-    return Hashing.sha1().hashString(strToHash, UTF_8).toString().substring(0, numBytes * 2);
-  }
 }
diff -r -u ./RegMiner4APR-Regression-Bugs/WORKING/java/src/com/google/template/soy/jssrc/internal/ExtractMsgVariablesVisitor.java ./RegMiner4APR-Regression-Bugs/BIC/java/src/com/google/template/soy/jssrc/internal/ExtractMsgVariablesVisitor.java
--- ./RegMiner4APR-Regression-Bugs/WORKING/java/src/com/google/template/soy/jssrc/internal/ExtractMsgVariablesVisitor.java	2024-09-08 01:36:27.913905238 +1000
+++ ./RegMiner4APR-Regression-Bugs/BIC/java/src/com/google/template/soy/jssrc/internal/ExtractMsgVariablesVisitor.java	2024-09-08 01:36:27.869904929 +1000
@@ -18,11 +18,13 @@
 
 import com.google.template.soy.base.internal.IdGenerator;
 import com.google.template.soy.data.SanitizedContent.ContentKind;
+import com.google.template.soy.msgs.internal.MsgUtils;
 import com.google.template.soy.passes.BuildAllDependeesMapVisitor;
 import com.google.template.soy.soytree.AbstractSoyNodeVisitor;
 import com.google.template.soy.soytree.HtmlAttributeNode;
 import com.google.template.soy.soytree.LetContentNode;
 import com.google.template.soy.soytree.MsgFallbackGroupNode;
+import com.google.template.soy.soytree.MsgNode;
 import com.google.template.soy.soytree.SoyFileSetNode;
 import com.google.template.soy.soytree.SoyNode;
 import com.google.template.soy.soytree.SoyNode.BlockNode;
@@ -40,10 +42,8 @@
  * expression instead of a statement. After this pass, all MsgFallbackGroupNodes will only appear
  * inside {@link LetContentNodes}.
  *
- * <p>TODO(slaks): Generalize to extract all nodes that create statements but must appear in
- * expression context ({@link MsgHtmlTagNode}, {@link CallParamNode}, {@link LogNode}, & idom
- * attribute values) to variables. This will let us completely remove the many paths in jssrc that
- * conditionally emit temporary variables.
+ * <p>TODO(lukes,slaks): Rewrite any code relying on this pass to instead take advantage of the code
+ * chunk api.
  *
  * <p>{@link #exec} must be called on a full parse tree.
  *
@@ -55,6 +55,8 @@
 
   private Map<SoyNode, List<SoyNode>> allDependeesMap;
 
+  private int counter;
+
   @Override
   public Void exec(SoyNode node) {
     msgFbGrpNodes = new ArrayList<>();
@@ -67,7 +69,7 @@
 
   @Override
   protected void visitSoyFileSetNode(SoyFileSetNode node) {
-
+    counter = 0;
     // We find all the MsgFallbackGroupNodes before replacing them because we don't want the
     // modifications to interfere with the traversal.
 
@@ -105,7 +107,13 @@
 
   protected void wrapMsgFallbackGroupNodeHelper(
       MsgFallbackGroupNode msgFbGrpNode, IdGenerator nodeIdGen) {
-    String varName = "msg_" + nodeIdGen.genId();
+    // try to generate a unique variable name
+    // due to an optimization in GenJsCodeVisitor this variable is never actually used directly.
+    // though it may be for incrementaldomsrc.
+    String varName = "msg_" + ++counter;
+    for (MsgNode msg : msgFbGrpNode.getChildren()) {
+      varName += "_" + MsgUtils.computeMsgIdForDualFormat(msg);
+    }
 
     // Find the actual content kind that this node prints in.
     RenderUnitNode container = msgFbGrpNode.getNearestAncestor(RenderUnitNode.class);
diff -r -u ./RegMiner4APR-Regression-Bugs/WORKING/java/src/com/google/template/soy/soytree/TemplateDelegateNodeBuilder.java ./RegMiner4APR-Regression-Bugs/BIC/java/src/com/google/template/soy/soytree/TemplateDelegateNodeBuilder.java
--- ./RegMiner4APR-Regression-Bugs/WORKING/java/src/com/google/template/soy/soytree/TemplateDelegateNodeBuilder.java	2024-09-08 01:36:27.921905294 +1000
+++ ./RegMiner4APR-Regression-Bugs/BIC/java/src/com/google/template/soy/soytree/TemplateDelegateNodeBuilder.java	2024-09-08 01:36:27.877904985 +1000
@@ -223,26 +223,20 @@
    */
   private void genInternalTemplateNameHelper(SourceLocation nameLocation) {
     Preconditions.checkState(id != null);
-
-    // Compute a SHA-1 hash value for the delPackageName plus delTemplateKey, and take the first 32
-    // bits worth as a hex string. This will be included in the generated internal-use template name
-    // to prevent collisions in the case where not all Soy files are compiled at once (not really
-    // the intended usage of the Soy compiler, but some projects use it this way). Note that the
-    // node id is also included in the generated name, which is already sufficient for guaranteeing
-    // unique names in the case where all Soy files are compiled together at once.
-    // TODO(lukes): why calculate a hash? just cat the bits together to get a
-    // reasonable and unique string?  is this for client obfuscation?
+    // encode all the deltemplate information into the name to get a unique string
+    // though... it might make more sense for this to not have a user visible name given that the
+    // calling convention is indirect.
     String delPackageAndDelTemplateStr =
-        (soyFileHeaderInfo.delPackageName == null ? "" : soyFileHeaderInfo.delPackageName)
-            + "~"
-            + delTemplateName
-            + "~"
+        (soyFileHeaderInfo.delPackageName == null
+                ? ""
+                : soyFileHeaderInfo.delPackageName.replace('.', '_'))
+            + "_"
+            + delTemplateName.replace('.', '_')
+            + "_"
             + delTemplateVariant;
-    String collisionPreventionStr =
-        BaseUtils.computePartialSha1AsHexString(delPackageAndDelTemplateStr, 32);
 
     // Generate the actual internal-use template name.
-    String generatedPartialTemplateName = ".__deltemplate_s" + id + "_" + collisionPreventionStr;
+    String generatedPartialTemplateName = ".__deltemplate_" + delPackageAndDelTemplateStr;
     String generatedTemplateName = soyFileHeaderInfo.namespace + generatedPartialTemplateName;
     setTemplateNames(generatedTemplateName, nameLocation, generatedPartialTemplateName);
   }
