diff -r -u ./RegMiner4APR-Regression-Bugs/BUGGY/java/src/com/google/template/soy/incrementaldomsrc/AssistantForHtmlMsgs.java ./RegMiner4APR-Regression-Bugs/BFC/java/src/com/google/template/soy/incrementaldomsrc/AssistantForHtmlMsgs.java
--- ./RegMiner4APR-Regression-Bugs/BUGGY/java/src/com/google/template/soy/incrementaldomsrc/AssistantForHtmlMsgs.java
+++ ./RegMiner4APR-Regression-Bugs/BFC/java/src/com/google/template/soy/incrementaldomsrc/AssistantForHtmlMsgs.java
@@ -16,8 +16,6 @@
 package com.google.template.soy.incrementaldomsrc;
 
 import static com.google.template.soy.incrementaldomsrc.IncrementalDomRuntime.INCREMENTAL_DOM_TEXT;
-import static com.google.template.soy.jssrc.dsl.CodeChunk.WithValue.LITERAL_UNDEFINED;
-import static com.google.template.soy.jssrc.dsl.CodeChunk.assign;
 import static com.google.template.soy.jssrc.dsl.CodeChunk.id;
 import static com.google.template.soy.jssrc.internal.JsRuntime.GOOG_STRING_UNESCAPE_ENTITIES;
 
@@ -88,7 +86,7 @@
   }
 
   @Override
-  public CodeChunk.WithValue generateMsgGroupVariable(MsgFallbackGroupNode node) {
+  public String generateMsgGroupVariable(MsgFallbackGroupNode node) {
     throw new IllegalStateException(
         "This class should only be used for via the new idom entry-point.");
   }
@@ -139,11 +137,11 @@
     // It'd be nice to move this codegen to a Soy template...
 
     // The raw translated text, with placeholder placeholders.
-    CodeChunk.WithValue translationVar = super.generateMsgGroupVariable(node);
+    String translationVar = super.generateMsgGroupVariable(node);
 
     // If there are no placeholders, we don't need anything special (but we still need to unescape).
     if (placeholderNames.isEmpty()) {
-      CodeChunk.WithValue unescape = GOOG_STRING_UNESCAPE_ENTITIES.call(translationVar);
+      CodeChunk.WithValue unescape = GOOG_STRING_UNESCAPE_ENTITIES.call(id(translationVar));
       jsCodeBuilder().append(INCREMENTAL_DOM_TEXT.call(unescape));
       return;
     }
@@ -173,13 +171,7 @@
     jsCodeBuilder().increaseIndent();
     // Find the placeholder.
     jsCodeBuilder()
-        .append(
-            assign(
-                matchVar,
-                id(regexVar)
-                    .dotAccess("exec")
-                    .call(translationVar)
-                    .or(LITERAL_UNDEFINED, translationContext.codeGenerator())));
+        .appendLine(matchVar, " = ", regexVar, ".exec(", translationVar, ") || undefined;");
     // Replace null with undefined.  This is necessary to make substring() treat falsy as an omitted
     // parameter, so that it goes until the end of the string.  Otherwise, the non-numeric parameter
     // would be coerced to zero.
@@ -190,7 +182,7 @@
         id(matchVar).and(id(matchVar).dotAccess("index"), translationContext.codeGenerator());
     CodeChunk.WithValue unescape =
         GOOG_STRING_UNESCAPE_ENTITIES.call(
-            translationVar.dotAccess("substring").call(id(lastIndexVar), endIndex));
+            id(translationVar).dotAccess("substring").call(id(lastIndexVar), endIndex));
 
     jsCodeBuilder().append(INCREMENTAL_DOM_TEXT.call(unescape));
     jsCodeBuilder().appendLine(lastIndexVar, " = ", regexVar, ".lastIndex;");
diff -r -u ./RegMiner4APR-Regression-Bugs/BUGGY/java/src/com/google/template/soy/incrementaldomsrc/GenIncrementalDomCodeVisitor.java ./RegMiner4APR-Regression-Bugs/BFC/java/src/com/google/template/soy/incrementaldomsrc/GenIncrementalDomCodeVisitor.java
--- ./RegMiner4APR-Regression-Bugs/BUGGY/java/src/com/google/template/soy/incrementaldomsrc/GenIncrementalDomCodeVisitor.java
+++ ./RegMiner4APR-Regression-Bugs/BFC/java/src/com/google/template/soy/incrementaldomsrc/GenIncrementalDomCodeVisitor.java
@@ -677,7 +677,7 @@
 
   @Override
   protected void visitMsgFallbackGroupNode(MsgFallbackGroupNode node) {
-    CodeChunk.WithValue msgExpression;
+    String msgExpression;
     switch (node.getHtmlContext()) {
       case HTML_PCDATA:
         new AssistantForHtmlMsgs(
@@ -708,11 +708,12 @@
                     templateTranslationContext,
                     errorReporter)
                 .generateMsgGroupVariable(node);
-        getJsCodeBuilder().addChunkToOutputVar(GOOG_STRING_UNESCAPE_ENTITIES.call(msgExpression));
+        getJsCodeBuilder()
+            .addChunkToOutputVar(GOOG_STRING_UNESCAPE_ENTITIES.call(id(msgExpression)));
         break;
       default:
         msgExpression = getAssistantForMsgs().generateMsgGroupVariable(node);
-        getJsCodeBuilder().addChunkToOutputVar(msgExpression);
+        getJsCodeBuilder().addChunkToOutputVar(id(msgExpression));
         break;
     }
   }
diff -r -u ./RegMiner4APR-Regression-Bugs/BUGGY/java/src/com/google/template/soy/jssrc/dsl/CodeChunk.java ./RegMiner4APR-Regression-Bugs/BFC/java/src/com/google/template/soy/jssrc/dsl/CodeChunk.java
--- ./RegMiner4APR-Regression-Bugs/BUGGY/java/src/com/google/template/soy/jssrc/dsl/CodeChunk.java
+++ ./RegMiner4APR-Regression-Bugs/BFC/java/src/com/google/template/soy/jssrc/dsl/CodeChunk.java
@@ -301,7 +301,6 @@
     public static final WithValue LITERAL_TRUE = id("true");
     public static final WithValue LITERAL_FALSE = id("false");
     public static final WithValue LITERAL_NULL = id("null");
-    public static final WithValue LITERAL_UNDEFINED = id("undefined");
     public static final WithValue LITERAL_EMPTY_STRING = Leaf.create("''");
     public static final WithValue EMPTY_OBJECT_LITERAL = Leaf.create("{}");
 
diff -r -u ./RegMiner4APR-Regression-Bugs/BUGGY/java/src/com/google/template/soy/jssrc/internal/GenJsCodeVisitorAssistantForMsgs.java ./RegMiner4APR-Regression-Bugs/BFC/java/src/com/google/template/soy/jssrc/internal/GenJsCodeVisitorAssistantForMsgs.java
--- ./RegMiner4APR-Regression-Bugs/BUGGY/java/src/com/google/template/soy/jssrc/internal/GenJsCodeVisitorAssistantForMsgs.java
+++ ./RegMiner4APR-Regression-Bugs/BFC/java/src/com/google/template/soy/jssrc/internal/GenJsCodeVisitorAssistantForMsgs.java
@@ -23,7 +23,6 @@
 import static com.google.template.soy.jssrc.dsl.CodeChunk.new_;
 import static com.google.template.soy.jssrc.dsl.CodeChunk.stringLiteral;
 import static com.google.template.soy.jssrc.internal.JsRuntime.GOOG_GET_MSG;
-import static com.google.template.soy.jssrc.internal.JsRuntime.GOOG_GET_MSG_WITH_FALLBACK;
 import static com.google.template.soy.jssrc.internal.JsRuntime.GOOG_I18N_MESSAGE_FORMAT;
 
 import com.google.common.base.CaseFormat;
@@ -34,7 +33,6 @@
 import com.google.template.soy.jssrc.SoyJsSrcOptions;
 import com.google.template.soy.jssrc.dsl.CodeChunk;
 import com.google.template.soy.jssrc.dsl.CodeChunkUtils;
-import com.google.template.soy.jssrc.dsl.Declaration;
 import com.google.template.soy.msgs.internal.IcuSyntaxUtils;
 import com.google.template.soy.msgs.internal.MsgUtils;
 import com.google.template.soy.msgs.restricted.SoyMsgPart;
@@ -167,76 +168,92 @@
-  public CodeChunk.WithValue generateMsgGroupVariable(MsgFallbackGroupNode node) {
-    return node.hasFallbackMsg()
-        ? generateMsgGroupVariableWithFallbackMsgs(node)
-        : generateSingleMsgVariable(node.getChild(0));
+  public String generateMsgGroupVariable(MsgFallbackGroupNode node) {
+    String tmpVarName = translationContext.nameGenerator().generateName("msg_s");
+    if (node.numChildren() == 1) {
+      return generateSingleMsgVariable(node.getChild(0), tmpVarName);
+    } else { // has fallbackmsg children
+      generateMsgGroupVariable(node, tmpVarName);
+      return tmpVarName;
+    }
   }
 
-  private CodeChunk.WithValue generateSingleMsgVariable(MsgNode msgNode) {
-    String varName = getGoogMsgVarName(msgNode);
-    GoogMsgCodeGenInfo googMsgCodeGenInfo = genGoogGetMsgCallHelper(varName, msgNode);
+  private String generateSingleMsgVariable(MsgNode msgNode, String tmpVarName) {
+    String googMsgVarName = buildGoogMsgVarNameHelper(msgNode);
+    GoogMsgCodeGenInfo googMsgCodeGenInfo = genGoogGetMsgCallHelper(googMsgVarName, msgNode);

     if (!msgNode.isPlrselMsg()) {
       // No postprocessing is needed. Simply use the original goog.getMsg var.
-      return id(varName);
+      return googMsgVarName;
     }

-    return translationContext
-        .codeGenerator()
-        .declare(googMsgCodeGenInfo.getMessageFormatCall())
-        .ref();
+    jsCodeBuilder().append(declare(tmpVarName, getMessageFormatCall(googMsgCodeGenInfo)));
+    return tmpVarName;
   }
 
-  private CodeChunk.WithValue generateMsgGroupVariableWithFallbackMsgs(MsgFallbackGroupNode node) {
-    List<GoogMsgCodeGenInfo> childGenInfos = new ArrayList<>(node.numChildren());
+  private void generateMsgGroupVariable(MsgFallbackGroupNode node, String tmpVarName) {
+    List<GoogMsgCodeGenInfo> childGoogMsgCodeGenInfos = new ArrayList<>(node.numChildren());
 
     // Generate the goog.getMsg calls for all children.
     for (MsgNode msgNode : node.getChildren()) {
-      String googMsgVarName = getGoogMsgVarName(msgNode);
-      childGenInfos.add(genGoogGetMsgCallHelper(googMsgVarName, msgNode));
+      String googMsgVarName = buildGoogMsgVarNameHelper(msgNode);
+      childGoogMsgCodeGenInfos.add(genGoogGetMsgCallHelper(googMsgVarName, msgNode));
     }
 
-    ImmutableList.Builder<CodeChunk.WithValue> args = ImmutableList.builder();
-    for (GoogMsgCodeGenInfo childGoogMsgCodeGenInfo : childGenInfos) {
-      args.add(CodeChunk.id(childGoogMsgCodeGenInfo.googMsgVarName));
-    }
     // Declare a temporary variable to hold the getMsgWithFallback() call so that we can apply any
-    Declaration decl =
-        translationContext.codeGenerator().declare(GOOG_GET_MSG_WITH_FALLBACK.call(args.build()));

-    ImmutableList.Builder<CodeChunk> initialStatements = ImmutableList.builder();
+    jsCodeBuilder().appendLineStart("var ", tmpVarName, " = goog.getMsgWithFallback(");
+    boolean isFirst = true;
+    for (GoogMsgCodeGenInfo childGoogMsgCodeGenInfo : childGoogMsgCodeGenInfos) {
+      if (isFirst) {
+        isFirst = false;
+      } else {
+        jsCodeBuilder().append(", ");
+      }
+      jsCodeBuilder().append(childGoogMsgCodeGenInfo.googMsgVarName);
+    }
+    jsCodeBuilder().appendLineEnd(");");
 
     // Generate the goog.i18n.MessageFormat calls for child plural/select messages (if any), each
     // wrapped in an if-block that will only execute if that child is the chosen message.
-    for (GoogMsgCodeGenInfo child : childGenInfos) {
-      if (child.isPlrselMsg) {
-        initialStatements.add(
-            ifStatement(
-                    decl.ref().doubleEquals(id(child.googMsgVarName)),
-                    decl.ref().assign(child.getMessageFormatCall()))
-                .build());
+    for (GoogMsgCodeGenInfo childGoogMsgCodeGenInfo : childGoogMsgCodeGenInfos) {
+      if (childGoogMsgCodeGenInfo.isPlrselMsg) {
+        CodeChunk.WithValue tmpVar = id(tmpVarName);
+        jsCodeBuilder()
+            .append(
+                ifStatement(
+                        tmpVar.doubleEquals(id(childGoogMsgCodeGenInfo.googMsgVarName)),
+                        tmpVar.assign(getMessageFormatCall(childGoogMsgCodeGenInfo)))
+                    .build());
       }
     }

-    return decl.ref().withInitialStatements(initialStatements.build());
   }
 
-  private String getGoogMsgVarName(MsgNode msgNode) {
+  private String buildGoogMsgVarNameHelper(MsgNode msgNode) {
     String desiredName =
         jsSrcOptions.googMsgsAreExternal()
             ? "MSG_EXTERNAL_" + MsgUtils.computeMsgIdForDualFormat(msgNode)
@@ -343,6 +360,19 @@
     return msgStrSb.toString();
   }
 
+  private static CodeChunk.WithValue getMessageFormatCall(GoogMsgCodeGenInfo codeGenInfo) {
+    MapLiteralBuilder builder = codeGenInfo.pluralsAndSelects;
+    builder.putAll(codeGenInfo.placeholders);
+    return new_(GOOG_I18N_MESSAGE_FORMAT)
+        .call(id(codeGenInfo.googMsgVarName))
+        .dotAccess("formatIgnoringPound")
+        .call(builder.build());
+  }

   /** Stores the data required for generating {@code goog.getMsg()} calls. */
   private static final class GoogMsgCodeGenInfo {
 
@@ -362,18 +392,6 @@
       this.googMsgVarName = googMsgVarName;
       this.isPlrselMsg = isPlrselMsg;
     }

-    CodeChunk.WithValue getMessageFormatCall() {
-      pluralsAndSelects.putAll(placeholders);
-      return new_(GOOG_I18N_MESSAGE_FORMAT)
-          .call(id(googMsgVarName))
-          .dotAccess("formatIgnoringPound")
-          .call(pluralsAndSelects.build());
-    }
   }
 
   /**
@@ -513,7 +531,8 @@
 
   /** Returns a code chunk for the given placeholder node. */
   protected CodeChunk.WithValue genGoogMsgPlaceholder(MsgPlaceholderNode msgPhNode) {
-    List<CodeChunk.WithValue> contentChunks = new ArrayList<>(msgPhNode.numChildren());
+    List<CodeChunk.WithValue> contentChunks = new ArrayList<>();
 
     for (StandaloneNode contentNode : msgPhNode.getChildren()) {
 
diff -r -u ./RegMiner4APR-Regression-Bugs/BUGGY/java/src/com/google/template/soy/jssrc/internal/GenJsCodeVisitor.java ./RegMiner4APR-Regression-Bugs/BFC/java/src/com/google/template/soy/jssrc/internal/GenJsCodeVisitor.java
--- ./RegMiner4APR-Regression-Bugs/BUGGY/java/src/com/google/template/soy/jssrc/internal/GenJsCodeVisitor.java
+++ ./RegMiner4APR-Regression-Bugs/BFC/java/src/com/google/template/soy/jssrc/internal/GenJsCodeVisitor.java
@@ -959,9 +959,9 @@
     // Optimization: {msg} nodes emit statements and result in a JsExpr with a single variable.  Use
     // that variable (typically the MSG_* from getMsg) as-is instead of wrapping a new var around it
     if (node.getChildren().size() == 1 && node.getChild(0) instanceof MsgFallbackGroupNode) {
-      CodeChunk.WithValue msgVar =
+      String msgVar =
           getAssistantForMsgs().generateMsgGroupVariable((MsgFallbackGroupNode) node.getChild(0));
-      templateTranslationContext.soyToJsVariableMappings().put(node.getVarName(), msgVar);
+      templateTranslationContext.soyToJsVariableMappings().put(node.getVarName(), id(msgVar));
       return;
     }
 
diff -r -u ./RegMiner4APR-Regression-Bugs/BUGGY/java/src/com/google/template/soy/jssrc/internal/JsCodeBuilder.java ./RegMiner4APR-Regression-Bugs/BFC/java/src/com/google/template/soy/jssrc/internal/JsCodeBuilder.java
--- ./RegMiner4APR-Regression-Bugs/BUGGY/java/src/com/google/template/soy/jssrc/internal/JsCodeBuilder.java
+++ ./RegMiner4APR-Regression-Bugs/BFC/java/src/com/google/template/soy/jssrc/internal/JsCodeBuilder.java
@@ -23,6 +23,7 @@
 import com.google.common.base.Strings;
 import com.google.common.collect.ImmutableList;
 import com.google.template.soy.jssrc.dsl.CodeChunk;
+import com.google.template.soy.jssrc.dsl.CodeChunk.RequiresCollector;
 import com.google.template.soy.jssrc.dsl.CodeChunkUtils;
 import com.google.template.soy.jssrc.dsl.GoogRequire;
 import java.util.ArrayDeque;
@@ -108,7 +109,7 @@
    * <p>TODO(user): this is always an {@link CodeChunk#id}. Consider exposing a subclass of
    * CodeChunk so we can enforce this invariant at compile time.
    */
-  @Nullable private CodeChunk.WithValue currOutputVar;
+  @Nullable protected CodeChunk.WithValue currOutputVar;
 
   /** Whether the current output variable is initialized. */
   private boolean currOutputVarIsInited;
@@ -290,7 +291,7 @@
    * @param codeFragments The code string(s) to append.
    * @return This CodeBuilder (for stringing together operations).
    */
-  JsCodeBuilder appendLineStart(String... codeFragments) {
+  public JsCodeBuilder appendLineStart(String... codeFragments) {
     code.append(indent);
     append(codeFragments);
     return this;
@@ -302,18 +303,22 @@
    * @param codeFragments The code string(s) to append.
    * @return This CodeBuilder (for stringing together operations).
    */
-  JsCodeBuilder appendLineEnd(String... codeFragments) {
+  public JsCodeBuilder appendLineEnd(String... codeFragments) {
     append(codeFragments);
     code.append("\n");
     return this;
   }
 
+  public RequiresCollector getRequiresCollector() {
+    return requireCollector;
+  }

   /**
    * Adds a {@code goog.require}
    *
    * @param require The namespace being required
    */
-  protected void addGoogRequire(GoogRequire require) {
+  public void addGoogRequire(GoogRequire require) {
     GoogRequire oldRequire = googRequires.put(require.symbol(), require);
     if (oldRequire != null && !oldRequire.equals(require)) {
       throw new IllegalArgumentException(
diff -r -u ./RegMiner4APR-Regression-Bugs/BUGGY/java/src/com/google/template/soy/jssrc/internal/JsRuntime.java ./RegMiner4APR-Regression-Bugs/BFC/java/src/com/google/template/soy/jssrc/internal/JsRuntime.java
--- ./RegMiner4APR-Regression-Bugs/BUGGY/java/src/com/google/template/soy/jssrc/internal/JsRuntime.java
+++ ./RegMiner4APR-Regression-Bugs/BFC/java/src/com/google/template/soy/jssrc/internal/JsRuntime.java
@@ -57,9 +57,6 @@
 
   public static final CodeChunk.WithValue GOOG_GET_MSG = dottedIdNoRequire("goog.getMsg");
 
-  public static final CodeChunk.WithValue GOOG_GET_MSG_WITH_FALLBACK =
-      dottedIdNoRequire("goog.getMsgWithFallback");

   public static final CodeChunk.WithValue GOOG_IS_ARRAY = dottedIdNoRequire("goog.isArray");
 
   public static final CodeChunk.WithValue GOOG_IS_BOOLEAN = dottedIdNoRequire("goog.isBoolean");
